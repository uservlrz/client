{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\confi\\\\Downloads\\\\pdf-summarizer\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js otimizado para múltiplos PDFs com visualização para impressão\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport ErrorHandler from './components/ErrorHandler';\n\n// Função para determinar a URL da API baseada no ambiente\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction getApiUrl() {\n  // Em desenvolvimento (local), usa localhost\n  if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\n    return 'http://localhost:5000';\n  }\n\n  // Em produção, usa o domínio do Vercel para o backend\n  return 'https://server-theta-murex.vercel.app';\n}\n\n// URL da API - detecta automaticamente ambiente local ou produção\nconst API_URL = getApiUrl();\nfunction App() {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [fileResults, setFileResults] = useState([]); // Armazena os resultados de cada arquivo\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [apiStatus, setApiStatus] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState(null);\n  const [processingStage, setProcessingStage] = useState(null);\n  const [processedFiles, setProcessedFiles] = useState(0);\n  const [totalFiles, setTotalFiles] = useState(0);\n  const [selectedResultIndex, setSelectedResultIndex] = useState(null); // Para selecionar qual resultado visualizar\n  const [printMode, setPrintMode] = useState(false); // Para impressão\n  const textAreaRef = useRef(null);\n\n  // Verificar status da API ao carregar\n  useEffect(() => {\n    const checkApiStatus = async () => {\n      try {\n        const response = await fetch(`${API_URL}/api/health`);\n        if (response.ok) {\n          const data = await response.json();\n          setApiStatus({\n            status: 'online',\n            env: data.env,\n            url: API_URL\n          });\n          console.log(`API conectada: ${API_URL} (${data.env})`);\n        } else {\n          setApiStatus({\n            status: 'error',\n            message: `Erro ao conectar com a API: ${response.status}`,\n            url: API_URL\n          });\n        }\n      } catch (error) {\n        setApiStatus({\n          status: 'offline',\n          message: 'Não foi possível conectar ao servidor',\n          error: error.message,\n          url: API_URL\n        });\n        console.error('Erro ao verificar status da API:', error);\n      }\n    };\n    checkApiStatus();\n  }, []);\n\n  // Efeito para alternar para o modo de impressão e voltar\n  useEffect(() => {\n    if (printMode) {\n      // Timeout para dar tempo de renderizar antes de imprimir\n      const timeout = setTimeout(() => {\n        window.print();\n        // Retornar ao modo normal após a impressão\n        setPrintMode(false);\n      }, 300);\n      return () => clearTimeout(timeout);\n    }\n  }, [printMode]);\n\n  // Função para tentar reconectar com a API\n  const retryApiConnection = () => {\n    setApiStatus({\n      status: 'checking',\n      message: 'Verificando conexão...',\n      url: API_URL\n    });\n    setTimeout(() => {\n      checkApiStatus();\n    }, 1000);\n  };\n\n  // Função para verificar status da API\n  const checkApiStatus = async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/health`);\n      if (response.ok) {\n        const data = await response.json();\n        setApiStatus({\n          status: 'online',\n          env: data.env,\n          url: API_URL\n        });\n        setError(null);\n      } else {\n        setApiStatus({\n          status: 'error',\n          message: `Erro ao conectar com a API: ${response.status}`,\n          url: API_URL\n        });\n        setError(`Erro ao conectar com o servidor: ${response.status} ${response.statusText}`);\n      }\n    } catch (error) {\n      setApiStatus({\n        status: 'offline',\n        message: 'Não foi possível conectar ao servidor',\n        error: error.message,\n        url: API_URL\n      });\n      setError(`Falha de conexão com o servidor: ${error.message}`);\n    }\n  };\n\n  // Função para limpar os resultados e resetar o estado\n  const handleReset = () => {\n    setFileResults([]);\n    setError(null);\n    setFiles([]);\n    setUploadStatus(null);\n    setProcessingStage(null);\n    setProcessedFiles(0);\n    setTotalFiles(0);\n    setSelectedResultIndex(null);\n  };\n\n  // Processar o upload de múltiplos arquivos\n  const handleFileChange = e => {\n    const selectedFiles = Array.from(e.target.files);\n    setUploadStatus(null);\n    setProcessingStage(null);\n\n    // Verificando se todos os arquivos são PDFs\n    const validFiles = selectedFiles.filter(file => file.type === 'application/pdf');\n    if (validFiles.length === 0) {\n      setFiles([]);\n      setError('Por favor, selecione apenas arquivos PDF válidos.');\n    } else if (validFiles.length !== selectedFiles.length) {\n      setFiles(validFiles);\n      setError('Somente os arquivos PDF selecionados serão processados.');\n    } else {\n      setFiles(validFiles);\n      setError(null);\n    }\n  };\n\n  // Extrair exames de um conteúdo de texto\n  const extractExams = content => {\n    if (!content) return [];\n    const lines = content.split('\\n');\n    const exams = [];\n    lines.forEach(line => {\n      if (line.trim() && !line.match(/^SÉRIE|^HEMOGRAMA|^EXAMES|^Paciente:/i)) {\n        exams.push(line.trim());\n      }\n    });\n\n    // Remover duplicatas\n    return [...new Set(exams)];\n  };\n\n  // Função para processar o envio dos arquivos\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (files.length === 0) {\n      setError('Por favor, selecione pelo menos um arquivo PDF válido.');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    setUploadStatus({\n      stage: 'iniciando',\n      message: 'Iniciando processamento...'\n    });\n    setProcessingStage('upload');\n\n    // Definir o total de arquivos a processar\n    setTotalFiles(files.length);\n    setProcessedFiles(0);\n\n    // Limpar resultados anteriores\n    setFileResults([]);\n    try {\n      // Processar cada arquivo sequencialmente\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n\n        // Atualizar status para o arquivo atual\n        setUploadStatus({\n          stage: 'enviando',\n          message: `Enviando arquivo ${i + 1} de ${files.length}: ${file.name}...`\n        });\n        const formData = new FormData();\n        formData.append('pdf', file);\n        try {\n          console.log(`Enviando arquivo ${i + 1}/${files.length} para ${API_URL}/api/upload`);\n          const response = await fetch(`${API_URL}/api/upload`, {\n            method: 'POST',\n            body: formData\n          });\n          setProcessingStage('processing');\n          setUploadStatus({\n            stage: 'processando',\n            message: `Processando documento ${i + 1} de ${files.length}: ${file.name}...`\n          });\n          if (!response.ok) {\n            let errorMessage = `Erro ${response.status}: ${response.statusText}`;\n            try {\n              const errorData = await response.json();\n              if (errorData.message) {\n                errorMessage = errorData.message;\n              }\n            } catch (jsonError) {\n              // Continuar com a mensagem de erro padrão se não puder ler JSON\n            }\n\n            // Adicionar aos resultados como erro\n            setFileResults(prev => [...prev, {\n              fileName: file.name,\n              error: errorMessage,\n              successful: false\n            }]);\n            console.error(`Erro ao processar arquivo ${file.name}:`, errorMessage);\n          } else {\n            const data = await response.json();\n\n            // Verificar se temos resultados válidos\n            if (data.summaries && data.summaries.length > 0) {\n              // Extrair todos os exames das páginas\n              let allContent = '';\n              data.summaries.forEach(summary => {\n                allContent += summary.content + '\\n';\n              });\n\n              // Adicionar aos resultados\n              setFileResults(prev => [...prev, {\n                fileName: file.name,\n                patientName: data.patientName || 'Paciente não identificado',\n                exams: extractExams(allContent),\n                rawContent: allContent,\n                successful: true\n              }]);\n            } else {\n              // Adicionar aos resultados como erro\n              setFileResults(prev => [...prev, {\n                fileName: file.name,\n                error: 'Não foi possível extrair informações deste documento.',\n                successful: false\n              }]);\n            }\n          }\n        } catch (fileError) {\n          // Registrar erro para este arquivo\n          setFileResults(prev => [...prev, {\n            fileName: file.name,\n            error: fileError.message || 'Erro desconhecido ao processar o documento.',\n            successful: false\n          }]);\n          console.error(`Erro ao processar arquivo ${file.name}:`, fileError);\n        }\n\n        // Incrementar contador de arquivos processados\n        setProcessedFiles(i + 1);\n      }\n\n      // Após processar todos os arquivos, atualizar o status final\n      setProcessingStage('complete');\n\n      // Verificar quantos foram bem-sucedidos\n      const successfulFiles = fileResults.filter(result => result.successful).length;\n      if (successfulFiles === 0) {\n        setUploadStatus({\n          stage: 'erro',\n          message: 'Não foi possível processar nenhum dos documentos.'\n        });\n        setError('Nenhum documento pôde ser processado. Verifique o formato dos arquivos.');\n      } else if (successfulFiles < files.length) {\n        setUploadStatus({\n          stage: 'aviso',\n          message: `Processamento concluído com ${files.length - successfulFiles} falhas em ${files.length} arquivos.`\n        });\n      } else {\n        setUploadStatus({\n          stage: 'sucesso',\n          message: `${files.length} documento(s) processado(s) com sucesso!`\n        });\n      }\n    } catch (error) {\n      console.error('Erro global ao enviar os arquivos:', error);\n      setProcessingStage('error');\n      setUploadStatus({\n        stage: 'erro',\n        message: 'Falha no processamento dos documentos.'\n      });\n      setError(error.message || 'Erro ao processar os documentos. Tente novamente.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Função para selecionar um resultado para visualização detalhada\n  const handleSelectResult = index => {\n    setSelectedResultIndex(index === selectedResultIndex ? null : index);\n  };\n\n  // Função para copiar os resultados de um arquivo específico\n  const copyFileResults = result => {\n    if (!result || !result.successful) return;\n\n    // Criar texto formatado\n    let formattedText = `PACIENTE: ${result.patientName || 'Não identificado'}\\n`;\n    formattedText += `ARQUIVO: ${result.fileName}\\n\\n`;\n    result.exams.forEach(exam => {\n      formattedText += `${exam}\\n`;\n    });\n\n    // Copiar para a área de transferência\n    navigator.clipboard.writeText(formattedText).then(() => alert(`Resultados do arquivo \"${result.fileName}\" copiados!`)).catch(err => {\n      console.error('Erro ao copiar:', err);\n\n      // Fallback para browsers mais antigos\n      const tempTextArea = document.createElement('textarea');\n      tempTextArea.value = formattedText;\n      document.body.appendChild(tempTextArea);\n      tempTextArea.select();\n      document.execCommand('copy');\n      document.body.removeChild(tempTextArea);\n      alert(`Resultados do arquivo \"${result.fileName}\" copiados!`);\n    });\n  };\n\n  // Função para preparar e imprimir um resultado específico\n  const printFileResult = index => {\n    setSelectedResultIndex(index);\n    setPrintMode(true);\n  };\n\n  // Função para copiar todos os resultados\n  const copyAllResults = () => {\n    const successfulResults = fileResults.filter(res => res.successful);\n    if (successfulResults.length === 0) return;\n\n    // Criar texto formatado com todos os resultados\n    let formattedText = '';\n    successfulResults.forEach((result, index) => {\n      formattedText += `PACIENTE: ${result.patientName || 'Não identificado'}\\n`;\n      formattedText += `ARQUIVO: ${result.fileName}\\n\\n`;\n      result.exams.forEach(exam => {\n        formattedText += `${exam}\\n`;\n      });\n\n      // Adicionar separador entre arquivos, exceto no último\n      if (index < successfulResults.length - 1) {\n        formattedText += '\\n-----------------------------------\\n\\n';\n      }\n    });\n\n    // Copiar para a área de transferência\n    navigator.clipboard.writeText(formattedText).then(() => alert('Todos os resultados copiados!')).catch(err => {\n      console.error('Erro ao copiar:', err);\n\n      // Fallback para browsers mais antigos\n      const tempTextArea = document.createElement('textarea');\n      tempTextArea.value = formattedText;\n      document.body.appendChild(tempTextArea);\n      tempTextArea.select();\n      document.execCommand('copy');\n      document.body.removeChild(tempTextArea);\n      alert('Todos os resultados copiados!');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${printMode ? 'print-mode' : ''}`,\n    children: [!printMode && /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"institute-logo\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"logo-text\",\n          children: \"Instituto Paulo Godoi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Extrator de Resultados de Exames\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"subtitle\",\n        children: \"Sistema interno para processamento de laudos laboratoriais\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 11\n      }, this), apiStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `api-status ${apiStatus.status}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status-indicator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 15\n        }, this), apiStatus.status === 'online' ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"API conectada (\", apiStatus.env, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 17\n        }, this) : apiStatus.status === 'checking' ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Verificando conex\\xE3o...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Erro de conex\\xE3o: \", apiStatus.message, /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"retry-button\",\n            onClick: retryApiConnection,\n            children: \"Reconectar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [printMode && selectedResultIndex !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"print-view\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"print-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Resultados de Exames Laboratoriais\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"print-info\",\n            children: [\"Data: \", new Date().toLocaleDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }, this), fileResults[selectedResultIndex].successful ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"print-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"patient-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Paciente: \", fileResults[selectedResultIndex].patientName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Arquivo: \", fileResults[selectedResultIndex].fileName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"exam-results\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Resultados:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"results-table\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Exame\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 457,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Resultado\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 458,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Refer\\xEAncia\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 459,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 456,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 455,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: fileResults[selectedResultIndex].exams.map((exam, i) => {\n                  // Tentativa de separar o nome do exame dos resultados/valores de referência\n                  const parts = exam.split(':');\n                  const examName = parts[0];\n\n                  // Se tiver divisão, processar campos\n                  if (parts.length > 1) {\n                    // Extrair a parte do resultado e tentar dividir pelo VR (Valor de Referência)\n                    const resultsSection = parts.slice(1).join(':').trim();\n                    const vrParts = resultsSection.split('|');\n\n                    // Se conseguiu dividir pelo campo VR\n                    if (vrParts.length > 1) {\n                      const resultValue = vrParts[0].trim();\n                      const refValue = vrParts[1].trim();\n                      return /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                          children: examName\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 481,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: resultValue\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 482,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: refValue\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 483,\n                          columnNumber: 33\n                        }, this)]\n                      }, i, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 480,\n                        columnNumber: 31\n                      }, this);\n                    } else {\n                      // Se não conseguiu identificar o padrão completo, exibe em apenas 2 colunas\n                      return /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                          children: examName\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 490,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          colSpan: \"2\",\n                          children: resultsSection\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 491,\n                          columnNumber: 33\n                        }, this)]\n                      }, i, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 489,\n                        columnNumber: 31\n                      }, this);\n                    }\n                  } else {\n                    // Se não conseguiu dividir pelo padrão básico, mostra a linha completa\n                    return /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        colSpan: \"3\",\n                        children: exam\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 499,\n                        columnNumber: 31\n                      }, this)\n                    }, i, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 498,\n                      columnNumber: 29\n                    }, this);\n                  }\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"print-footer\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Instituto Paulo Godoi - Processamento de Exames\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Documento gerado em \", new Date().toLocaleString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"print-error\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Erro ao processar o documento\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: fileResults[selectedResultIndex].error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }, this), !printMode && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [((apiStatus === null || apiStatus === void 0 ? void 0 : apiStatus.status) === 'offline' || (apiStatus === null || apiStatus === void 0 ? void 0 : apiStatus.status) === 'error') && /*#__PURE__*/_jsxDEV(ErrorHandler, {\n          error: `Não foi possível conectar ao servidor. ${apiStatus.message}`,\n          onRetry: retryApiConnection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"uploader-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"file-input-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                id: \"pdf-upload\",\n                onChange: handleFileChange,\n                accept: \"application/pdf\",\n                multiple: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 535,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"pdf-upload\",\n                className: \"file-label\",\n                children: files.length > 0 ? `${files.length} arquivo(s) selecionado(s)` : 'Escolher arquivos PDF de exames'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 542,\n                columnNumber: 19\n              }, this), files.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"selected-files\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Arquivos selecionados:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 550,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: files.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: file.name\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 553,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 551,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 549,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"upload-button\",\n              disabled: files.length === 0 || (apiStatus === null || apiStatus === void 0 ? void 0 : apiStatus.status) !== 'online' || processingStage === 'upload' || processingStage === 'processing',\n              children: processingStage === 'upload' || processingStage === 'processing' ? 'Processando...' : 'Extrair Resultados'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 559,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 15\n          }, this), (processingStage === 'upload' || processingStage === 'processing') && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `progress-bar ${processingStage}`,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress-indicator\",\n                style: {\n                  width: totalFiles > 0 ? `${processedFiles / totalFiles * 100}%` : '0%'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 573,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-status\",\n              children: [(uploadStatus === null || uploadStatus === void 0 ? void 0 : uploadStatus.message) || 'Processando documentos...', totalFiles > 0 && ` (${processedFiles}/${totalFiles})`]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 17\n          }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `upload-status ${uploadStatus.stage}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"status-icon\",\n              children: uploadStatus.stage === 'sucesso' ? '✓' : uploadStatus.stage === 'erro' ? '✗' : uploadStatus.stage === 'aviso' ? '⚠️' : '⟳'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 590,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"status-message\",\n              children: uploadStatus.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 17\n          }, this), uploadStatus && uploadStatus.stage === 'erro' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pdf-tips\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Poss\\xEDveis solu\\xE7\\xF5es:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Verifique se os PDFs n\\xE3o est\\xE3o protegidos por senha\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 604,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Tente salvar os PDFs novamente usando \\\"Salvar como\\\" no Adobe Reader\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 605,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Se poss\\xEDvel, tente imprimir os documentos para novos PDFs\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Entre em contato com o laborat\\xF3rio para obter vers\\xF5es digitais alternativas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 607,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 13\n        }, this), loading && !processingStage && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"loading\",\n          children: \"Processando os documentos, por favor aguarde...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 45\n        }, this), error && !uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: [\"Erro: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 40\n        }, this), fileResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reset-button-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reset-button\",\n            onClick: handleReset,\n            children: \"Novos Documentos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 17\n          }, this), fileResults.filter(r => r.successful).length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"copy-all-button\",\n            onClick: copyAllResults,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"copy-icon\",\n              children: \"\\uD83D\\uDCCB\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 21\n            }, this), \" Copiar Todos Resultados\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 15\n        }, this), fileResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Resultados Processados (\", fileResults.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"results-list\",\n            children: fileResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `result-item ${result.successful ? 'success' : 'error'} ${selectedResultIndex === index ? 'expanded' : ''}`,\n              onClick: () => handleSelectResult(index),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"result-header\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"file-name\",\n                  children: result.fileName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 651,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `status-badge ${result.successful ? 'success' : 'error'}`,\n                  children: result.successful ? 'Processado' : 'Erro'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 652,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 650,\n                columnNumber: 23\n              }, this), result.successful ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"result-summary\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"patient-name\",\n                    children: [\"Paciente: \", result.patientName]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 660,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"exams-count\",\n                    children: [result.exams.length, \" exames encontrados\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 661,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 659,\n                  columnNumber: 27\n                }, this), selectedResultIndex === index && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"result-details\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"exams-list\",\n                    children: result.exams.map((exam, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"exam-row\",\n                      children: exam\n                    }, i, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 668,\n                      columnNumber: 35\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 666,\n                    columnNumber: 31\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"result-actions\",\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"copy-button\",\n                      onClick: e => {\n                        e.stopPropagation();\n                        copyFileResults(result);\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                        className: \"copy-icon\",\n                        children: \"\\uD83D\\uDCCB\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 680,\n                        columnNumber: 35\n                      }, this), \" Copiar\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 673,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"print-button\",\n                      onClick: e => {\n                        e.stopPropagation();\n                        printFileResult(index);\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                        className: \"print-icon\",\n                        children: \"\\uD83D\\uDDA8\\uFE0F\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 689,\n                        columnNumber: 35\n                      }, this), \" Imprimir\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 682,\n                      columnNumber: 33\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 672,\n                    columnNumber: 31\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 665,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"error-message\",\n                children: result.error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 696,\n                columnNumber: 25\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 645,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }, this), !printMode && /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2025 - Instituto Paulo Godoi - Sistema de Processamento de Exames\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"api-info\",\n        children: [\"Ambiente: \", (apiStatus === null || apiStatus === void 0 ? void 0 : apiStatus.env) || 'Desconectado', \" | API: \", API_URL]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 711,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"j5lBx9iKe7XaM5WdhE22+OC+vp0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ErrorHandler","jsxDEV","_jsxDEV","Fragment","_Fragment","getApiUrl","window","location","hostname","API_URL","App","_s","files","setFiles","fileResults","setFileResults","loading","setLoading","error","setError","apiStatus","setApiStatus","uploadStatus","setUploadStatus","processingStage","setProcessingStage","processedFiles","setProcessedFiles","totalFiles","setTotalFiles","selectedResultIndex","setSelectedResultIndex","printMode","setPrintMode","textAreaRef","checkApiStatus","response","fetch","ok","data","json","status","env","url","console","log","message","timeout","setTimeout","print","clearTimeout","retryApiConnection","statusText","handleReset","handleFileChange","e","selectedFiles","Array","from","target","validFiles","filter","file","type","length","extractExams","content","lines","split","exams","forEach","line","trim","match","push","Set","handleSubmit","preventDefault","stage","i","name","formData","FormData","append","method","body","errorMessage","errorData","jsonError","prev","fileName","successful","summaries","allContent","summary","patientName","rawContent","fileError","successfulFiles","result","handleSelectResult","index","copyFileResults","formattedText","exam","navigator","clipboard","writeText","then","alert","catch","err","tempTextArea","document","createElement","value","appendChild","select","execCommand","removeChild","printFileResult","copyAllResults","successfulResults","res","className","children","_jsxFileName","lineNumber","columnNumber","onClick","Date","toLocaleDateString","map","parts","examName","resultsSection","slice","join","vrParts","resultValue","refValue","colSpan","toLocaleString","onRetry","onSubmit","id","onChange","accept","multiple","htmlFor","disabled","style","width","r","stopPropagation","_c","$RefreshReg$"],"sources":["C:/Users/confi/Downloads/pdf-summarizer/client/src/App.js"],"sourcesContent":["// App.js otimizado para múltiplos PDFs com visualização para impressão\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport './App.css';\r\nimport ErrorHandler from './components/ErrorHandler';\r\n\r\n// Função para determinar a URL da API baseada no ambiente\r\nfunction getApiUrl() {\r\n  // Em desenvolvimento (local), usa localhost\r\n  if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\r\n    return 'http://localhost:5000';\r\n  }\r\n  \r\n  // Em produção, usa o domínio do Vercel para o backend\r\n  return 'https://server-theta-murex.vercel.app';\r\n}\r\n\r\n// URL da API - detecta automaticamente ambiente local ou produção\r\nconst API_URL = getApiUrl();\r\n\r\nfunction App() {\r\n  const [files, setFiles] = useState([]);\r\n  const [fileResults, setFileResults] = useState([]); // Armazena os resultados de cada arquivo\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [apiStatus, setApiStatus] = useState(null);\r\n  const [uploadStatus, setUploadStatus] = useState(null);\r\n  const [processingStage, setProcessingStage] = useState(null);\r\n  const [processedFiles, setProcessedFiles] = useState(0);\r\n  const [totalFiles, setTotalFiles] = useState(0);\r\n  const [selectedResultIndex, setSelectedResultIndex] = useState(null); // Para selecionar qual resultado visualizar\r\n  const [printMode, setPrintMode] = useState(false); // Para impressão\r\n  const textAreaRef = useRef(null);\r\n\r\n  // Verificar status da API ao carregar\r\n  useEffect(() => {\r\n    const checkApiStatus = async () => {\r\n      try {\r\n        const response = await fetch(`${API_URL}/api/health`);\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setApiStatus({\r\n            status: 'online',\r\n            env: data.env,\r\n            url: API_URL\r\n          });\r\n          console.log(`API conectada: ${API_URL} (${data.env})`);\r\n        } else {\r\n          setApiStatus({\r\n            status: 'error',\r\n            message: `Erro ao conectar com a API: ${response.status}`,\r\n            url: API_URL\r\n          });\r\n        }\r\n      } catch (error) {\r\n        setApiStatus({\r\n          status: 'offline',\r\n          message: 'Não foi possível conectar ao servidor',\r\n          error: error.message,\r\n          url: API_URL\r\n        });\r\n        console.error('Erro ao verificar status da API:', error);\r\n      }\r\n    };\r\n\r\n    checkApiStatus();\r\n  }, []);\r\n\r\n  // Efeito para alternar para o modo de impressão e voltar\r\n  useEffect(() => {\r\n    if (printMode) {\r\n      // Timeout para dar tempo de renderizar antes de imprimir\r\n      const timeout = setTimeout(() => {\r\n        window.print();\r\n        // Retornar ao modo normal após a impressão\r\n        setPrintMode(false);\r\n      }, 300);\r\n      \r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [printMode]);\r\n\r\n  // Função para tentar reconectar com a API\r\n  const retryApiConnection = () => {\r\n    setApiStatus({\r\n      status: 'checking',\r\n      message: 'Verificando conexão...',\r\n      url: API_URL\r\n    });\r\n    \r\n    setTimeout(() => {\r\n      checkApiStatus();\r\n    }, 1000);\r\n  };\r\n  \r\n  // Função para verificar status da API\r\n  const checkApiStatus = async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/api/health`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setApiStatus({\r\n          status: 'online',\r\n          env: data.env,\r\n          url: API_URL\r\n        });\r\n        setError(null);\r\n      } else {\r\n        setApiStatus({\r\n          status: 'error',\r\n          message: `Erro ao conectar com a API: ${response.status}`,\r\n          url: API_URL\r\n        });\r\n        setError(`Erro ao conectar com o servidor: ${response.status} ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setApiStatus({\r\n        status: 'offline',\r\n        message: 'Não foi possível conectar ao servidor',\r\n        error: error.message,\r\n        url: API_URL\r\n      });\r\n      setError(`Falha de conexão com o servidor: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // Função para limpar os resultados e resetar o estado\r\n  const handleReset = () => {\r\n    setFileResults([]);\r\n    setError(null);\r\n    setFiles([]);\r\n    setUploadStatus(null);\r\n    setProcessingStage(null);\r\n    setProcessedFiles(0);\r\n    setTotalFiles(0);\r\n    setSelectedResultIndex(null);\r\n  };\r\n\r\n  // Processar o upload de múltiplos arquivos\r\n  const handleFileChange = (e) => {\r\n    const selectedFiles = Array.from(e.target.files);\r\n    setUploadStatus(null);\r\n    setProcessingStage(null);\r\n    \r\n    // Verificando se todos os arquivos são PDFs\r\n    const validFiles = selectedFiles.filter(file => file.type === 'application/pdf');\r\n    \r\n    if (validFiles.length === 0) {\r\n      setFiles([]);\r\n      setError('Por favor, selecione apenas arquivos PDF válidos.');\r\n    } else if (validFiles.length !== selectedFiles.length) {\r\n      setFiles(validFiles);\r\n      setError('Somente os arquivos PDF selecionados serão processados.');\r\n    } else {\r\n      setFiles(validFiles);\r\n      setError(null);\r\n    }\r\n  };\r\n\r\n  // Extrair exames de um conteúdo de texto\r\n  const extractExams = (content) => {\r\n    if (!content) return [];\r\n    \r\n    const lines = content.split('\\n');\r\n    const exams = [];\r\n    \r\n    lines.forEach(line => {\r\n      if (line.trim() && !line.match(/^SÉRIE|^HEMOGRAMA|^EXAMES|^Paciente:/i)) {\r\n        exams.push(line.trim());\r\n      }\r\n    });\r\n    \r\n    // Remover duplicatas\r\n    return [...new Set(exams)];\r\n  };\r\n\r\n  // Função para processar o envio dos arquivos\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (files.length === 0) {\r\n      setError('Por favor, selecione pelo menos um arquivo PDF válido.');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    setUploadStatus({ stage: 'iniciando', message: 'Iniciando processamento...' });\r\n    setProcessingStage('upload');\r\n    \r\n    // Definir o total de arquivos a processar\r\n    setTotalFiles(files.length);\r\n    setProcessedFiles(0);\r\n    \r\n    // Limpar resultados anteriores\r\n    setFileResults([]);\r\n\r\n    try {\r\n      // Processar cada arquivo sequencialmente\r\n      for (let i = 0; i < files.length; i++) {\r\n        const file = files[i];\r\n        \r\n        // Atualizar status para o arquivo atual\r\n        setUploadStatus({ \r\n          stage: 'enviando', \r\n          message: `Enviando arquivo ${i+1} de ${files.length}: ${file.name}...` \r\n        });\r\n        \r\n        const formData = new FormData();\r\n        formData.append('pdf', file);\r\n        \r\n        try {\r\n          console.log(`Enviando arquivo ${i+1}/${files.length} para ${API_URL}/api/upload`);\r\n          \r\n          const response = await fetch(`${API_URL}/api/upload`, {\r\n            method: 'POST',\r\n            body: formData,\r\n          });\r\n          \r\n          setProcessingStage('processing');\r\n          setUploadStatus({ \r\n            stage: 'processando', \r\n            message: `Processando documento ${i+1} de ${files.length}: ${file.name}...` \r\n          });\r\n          \r\n          if (!response.ok) {\r\n            let errorMessage = `Erro ${response.status}: ${response.statusText}`;\r\n            \r\n            try {\r\n              const errorData = await response.json();\r\n              if (errorData.message) {\r\n                errorMessage = errorData.message;\r\n              }\r\n            } catch (jsonError) {\r\n              // Continuar com a mensagem de erro padrão se não puder ler JSON\r\n            }\r\n            \r\n            // Adicionar aos resultados como erro\r\n            setFileResults(prev => [...prev, {\r\n              fileName: file.name,\r\n              error: errorMessage,\r\n              successful: false\r\n            }]);\r\n            \r\n            console.error(`Erro ao processar arquivo ${file.name}:`, errorMessage);\r\n          } else {\r\n            const data = await response.json();\r\n            \r\n            // Verificar se temos resultados válidos\r\n            if (data.summaries && data.summaries.length > 0) {\r\n              // Extrair todos os exames das páginas\r\n              let allContent = '';\r\n              data.summaries.forEach(summary => {\r\n                allContent += summary.content + '\\n';\r\n              });\r\n              \r\n              // Adicionar aos resultados\r\n              setFileResults(prev => [...prev, {\r\n                fileName: file.name,\r\n                patientName: data.patientName || 'Paciente não identificado',\r\n                exams: extractExams(allContent),\r\n                rawContent: allContent,\r\n                successful: true\r\n              }]);\r\n            } else {\r\n              // Adicionar aos resultados como erro\r\n              setFileResults(prev => [...prev, {\r\n                fileName: file.name,\r\n                error: 'Não foi possível extrair informações deste documento.',\r\n                successful: false\r\n              }]);\r\n            }\r\n          }\r\n        } catch (fileError) {\r\n          // Registrar erro para este arquivo\r\n          setFileResults(prev => [...prev, {\r\n            fileName: file.name,\r\n            error: fileError.message || 'Erro desconhecido ao processar o documento.',\r\n            successful: false\r\n          }]);\r\n          \r\n          console.error(`Erro ao processar arquivo ${file.name}:`, fileError);\r\n        }\r\n        \r\n        // Incrementar contador de arquivos processados\r\n        setProcessedFiles(i + 1);\r\n      }\r\n      \r\n      // Após processar todos os arquivos, atualizar o status final\r\n      setProcessingStage('complete');\r\n      \r\n      // Verificar quantos foram bem-sucedidos\r\n      const successfulFiles = fileResults.filter(result => result.successful).length;\r\n      \r\n      if (successfulFiles === 0) {\r\n        setUploadStatus({ \r\n          stage: 'erro', \r\n          message: 'Não foi possível processar nenhum dos documentos.'\r\n        });\r\n        setError('Nenhum documento pôde ser processado. Verifique o formato dos arquivos.');\r\n      } else if (successfulFiles < files.length) {\r\n        setUploadStatus({ \r\n          stage: 'aviso', \r\n          message: `Processamento concluído com ${files.length - successfulFiles} falhas em ${files.length} arquivos.`\r\n        });\r\n      } else {\r\n        setUploadStatus({ \r\n          stage: 'sucesso', \r\n          message: `${files.length} documento(s) processado(s) com sucesso!`\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro global ao enviar os arquivos:', error);\r\n      setProcessingStage('error');\r\n      setUploadStatus({ \r\n        stage: 'erro', \r\n        message: 'Falha no processamento dos documentos.'\r\n      });\r\n      \r\n      setError(error.message || 'Erro ao processar os documentos. Tente novamente.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Função para selecionar um resultado para visualização detalhada\r\n  const handleSelectResult = (index) => {\r\n    setSelectedResultIndex(index === selectedResultIndex ? null : index);\r\n  };\r\n  \r\n  // Função para copiar os resultados de um arquivo específico\r\n  const copyFileResults = (result) => {\r\n    if (!result || !result.successful) return;\r\n    \r\n    // Criar texto formatado\r\n    let formattedText = `PACIENTE: ${result.patientName || 'Não identificado'}\\n`;\r\n    formattedText += `ARQUIVO: ${result.fileName}\\n\\n`;\r\n    \r\n    result.exams.forEach(exam => {\r\n      formattedText += `${exam}\\n`;\r\n    });\r\n    \r\n    // Copiar para a área de transferência\r\n    navigator.clipboard.writeText(formattedText)\r\n      .then(() => alert(`Resultados do arquivo \"${result.fileName}\" copiados!`))\r\n      .catch(err => {\r\n        console.error('Erro ao copiar:', err);\r\n        \r\n        // Fallback para browsers mais antigos\r\n        const tempTextArea = document.createElement('textarea');\r\n        tempTextArea.value = formattedText;\r\n        document.body.appendChild(tempTextArea);\r\n        tempTextArea.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(tempTextArea);\r\n        \r\n        alert(`Resultados do arquivo \"${result.fileName}\" copiados!`);\r\n      });\r\n  };\r\n  \r\n  // Função para preparar e imprimir um resultado específico\r\n  const printFileResult = (index) => {\r\n    setSelectedResultIndex(index);\r\n    setPrintMode(true);\r\n  };\r\n  \r\n  // Função para copiar todos os resultados\r\n  const copyAllResults = () => {\r\n    const successfulResults = fileResults.filter(res => res.successful);\r\n    if (successfulResults.length === 0) return;\r\n    \r\n    // Criar texto formatado com todos os resultados\r\n    let formattedText = '';\r\n    \r\n    successfulResults.forEach((result, index) => {\r\n      formattedText += `PACIENTE: ${result.patientName || 'Não identificado'}\\n`;\r\n      formattedText += `ARQUIVO: ${result.fileName}\\n\\n`;\r\n      \r\n      result.exams.forEach(exam => {\r\n        formattedText += `${exam}\\n`;\r\n      });\r\n      \r\n      // Adicionar separador entre arquivos, exceto no último\r\n      if (index < successfulResults.length - 1) {\r\n        formattedText += '\\n-----------------------------------\\n\\n';\r\n      }\r\n    });\r\n    \r\n    // Copiar para a área de transferência\r\n    navigator.clipboard.writeText(formattedText)\r\n      .then(() => alert('Todos os resultados copiados!'))\r\n      .catch(err => {\r\n        console.error('Erro ao copiar:', err);\r\n        \r\n        // Fallback para browsers mais antigos\r\n        const tempTextArea = document.createElement('textarea');\r\n        tempTextArea.value = formattedText;\r\n        document.body.appendChild(tempTextArea);\r\n        tempTextArea.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(tempTextArea);\r\n        \r\n        alert('Todos os resultados copiados!');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className={`App ${printMode ? 'print-mode' : ''}`}>\r\n      {/* Esconder cabeçalho e elementos não essenciais no modo de impressão */}\r\n      {!printMode && (\r\n        <header className=\"App-header\">\r\n          <div className=\"institute-logo\">\r\n            <span className=\"logo-text\">Instituto Paulo Godoi</span>\r\n          </div>\r\n          <h1>Extrator de Resultados de Exames</h1>\r\n          <p className=\"subtitle\">Sistema interno para processamento de laudos laboratoriais</p>\r\n          \r\n          {/* Indicador de status da API */}\r\n          {apiStatus && (\r\n            <div className={`api-status ${apiStatus.status}`}>\r\n              <span className=\"status-indicator\"></span>\r\n              {apiStatus.status === 'online' ? (\r\n                <span>API conectada ({apiStatus.env})</span>\r\n              ) : apiStatus.status === 'checking' ? (\r\n                <span>Verificando conexão...</span>\r\n              ) : (\r\n                <span>Erro de conexão: {apiStatus.message} \r\n                  <button className=\"retry-button\" onClick={retryApiConnection}>\r\n                    Reconectar\r\n                  </button>\r\n                </span>\r\n              )}\r\n            </div>\r\n          )}\r\n        </header>\r\n      )}\r\n      \r\n      <main>\r\n        {/* No modo de impressão, mostrar apenas o resultado selecionado */}\r\n        {printMode && selectedResultIndex !== null && (\r\n          <div className=\"print-view\">\r\n            <div className=\"print-header\">\r\n              <h1>Resultados de Exames Laboratoriais</h1>\r\n              <p className=\"print-info\">Data: {new Date().toLocaleDateString()}</p>\r\n            </div>\r\n            \r\n            {fileResults[selectedResultIndex].successful ? (\r\n              <div className=\"print-content\">\r\n                <div className=\"patient-info\">\r\n                  <h2>Paciente: {fileResults[selectedResultIndex].patientName}</h2>\r\n                  <p>Arquivo: {fileResults[selectedResultIndex].fileName}</p>\r\n                </div>\r\n                \r\n                <div className=\"exam-results\">\r\n                  <h3>Resultados:</h3>\r\n                  <table className=\"results-table\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Exame</th>\r\n                        <th>Resultado</th>\r\n                        <th>Referência</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {fileResults[selectedResultIndex].exams.map((exam, i) => {\r\n                        // Tentativa de separar o nome do exame dos resultados/valores de referência\r\n                        const parts = exam.split(':');\r\n                        const examName = parts[0];\r\n                        \r\n                        // Se tiver divisão, processar campos\r\n                        if (parts.length > 1) {\r\n                          // Extrair a parte do resultado e tentar dividir pelo VR (Valor de Referência)\r\n                          const resultsSection = parts.slice(1).join(':').trim();\r\n                          const vrParts = resultsSection.split('|');\r\n                          \r\n                          // Se conseguiu dividir pelo campo VR\r\n                          if (vrParts.length > 1) {\r\n                            const resultValue = vrParts[0].trim();\r\n                            const refValue = vrParts[1].trim();\r\n                            \r\n                            return (\r\n                              <tr key={i}>\r\n                                <td>{examName}</td>\r\n                                <td>{resultValue}</td>\r\n                                <td>{refValue}</td>\r\n                              </tr>\r\n                            );\r\n                          } else {\r\n                            // Se não conseguiu identificar o padrão completo, exibe em apenas 2 colunas\r\n                            return (\r\n                              <tr key={i}>\r\n                                <td>{examName}</td>\r\n                                <td colSpan=\"2\">{resultsSection}</td>\r\n                              </tr>\r\n                            );\r\n                          }\r\n                        } else {\r\n                          // Se não conseguiu dividir pelo padrão básico, mostra a linha completa\r\n                          return (\r\n                            <tr key={i}>\r\n                              <td colSpan=\"3\">{exam}</td>\r\n                            </tr>\r\n                          );\r\n                        }\r\n                      })}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n                \r\n                <div className=\"print-footer\">\r\n                  <p>Instituto Paulo Godoi - Processamento de Exames</p>\r\n                  <p>Documento gerado em {new Date().toLocaleString()}</p>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"print-error\">\r\n                <h2>Erro ao processar o documento</h2>\r\n                <p>{fileResults[selectedResultIndex].error}</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n        \r\n        {!printMode && (\r\n          <>\r\n            {/* Mostrar o manipulador de erros para erros de API */}\r\n            {(apiStatus?.status === 'offline' || apiStatus?.status === 'error') && (\r\n              <ErrorHandler \r\n                error={`Não foi possível conectar ao servidor. ${apiStatus.message}`}\r\n                onRetry={retryApiConnection}\r\n              />\r\n            )}\r\n            \r\n            <div className=\"uploader-container\">\r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"file-input-container\">\r\n                  <input\r\n                    type=\"file\"\r\n                    id=\"pdf-upload\"\r\n                    onChange={handleFileChange}\r\n                    accept=\"application/pdf\"\r\n                    multiple\r\n                  />\r\n                  <label htmlFor=\"pdf-upload\" className=\"file-label\">\r\n                    {files.length > 0 \r\n                      ? `${files.length} arquivo(s) selecionado(s)` \r\n                      : 'Escolher arquivos PDF de exames'}\r\n                  </label>\r\n                  {/* Mostrar nomes dos arquivos selecionados */}\r\n                  {files.length > 0 && (\r\n                    <div className=\"selected-files\">\r\n                      <p>Arquivos selecionados:</p>\r\n                      <ul>\r\n                        {files.map((file, index) => (\r\n                          <li key={index}>{file.name}</li>\r\n                        ))}\r\n                      </ul>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <button \r\n                  type=\"submit\" \r\n                  className=\"upload-button\"\r\n                  disabled={files.length === 0 || apiStatus?.status !== 'online' || processingStage === 'upload' || processingStage === 'processing'}\r\n                >\r\n                  {processingStage === 'upload' || processingStage === 'processing' ? \r\n                    'Processando...' : 'Extrair Resultados'}\r\n                </button>\r\n              </form>\r\n              \r\n              {/* Indicador de progresso */}\r\n              {(processingStage === 'upload' || processingStage === 'processing') && (\r\n                <div className=\"progress-bar-container\">\r\n                  <div className={`progress-bar ${processingStage}`}>\r\n                    <div \r\n                      className=\"progress-indicator\" \r\n                      style={{\r\n                        width: totalFiles > 0 ? `${(processedFiles / totalFiles) * 100}%` : '0%'\r\n                      }}\r\n                    ></div>\r\n                  </div>\r\n                  <div className=\"progress-status\">\r\n                    {uploadStatus?.message || 'Processando documentos...'}\r\n                    {totalFiles > 0 && ` (${processedFiles}/${totalFiles})`}\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {/* Status de upload */}\r\n              {uploadStatus && (\r\n                <div className={`upload-status ${uploadStatus.stage}`}>\r\n                  <span className=\"status-icon\">\r\n                    {uploadStatus.stage === 'sucesso' ? '✓' : \r\n                    uploadStatus.stage === 'erro' ? '✗' : \r\n                    uploadStatus.stage === 'aviso' ? '⚠️' : '⟳'}\r\n                  </span>\r\n                  <span className=\"status-message\">{uploadStatus.message}</span>\r\n                </div>\r\n              )}\r\n              \r\n              {/* Dicas para PDFs problemáticos */}\r\n              {uploadStatus && uploadStatus.stage === 'erro' && (\r\n                <div className=\"pdf-tips\">\r\n                  <h4>Possíveis soluções:</h4>\r\n                  <ul>\r\n                    <li>Verifique se os PDFs não estão protegidos por senha</li>\r\n                    <li>Tente salvar os PDFs novamente usando \"Salvar como\" no Adobe Reader</li>\r\n                    <li>Se possível, tente imprimir os documentos para novos PDFs</li>\r\n                    <li>Entre em contato com o laboratório para obter versões digitais alternativas</li>\r\n                  </ul>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {loading && !processingStage && <p className=\"loading\">Processando os documentos, por favor aguarde...</p>}\r\n            {error && !uploadStatus && <p className=\"error\">Erro: {error}</p>}\r\n            \r\n            {/* Botão para resetar (somente se tiver resultados) */}\r\n            {fileResults.length > 0 && (\r\n              <div className=\"reset-button-container\">\r\n                <button \r\n                  className=\"reset-button\"\r\n                  onClick={handleReset}\r\n                >\r\n                  Novos Documentos\r\n                </button>\r\n                \r\n                {/* Botão para copiar todos os resultados */}\r\n                {fileResults.filter(r => r.successful).length > 0 && (\r\n                  <button\r\n                    className=\"copy-all-button\"\r\n                    onClick={copyAllResults}\r\n                  >\r\n                    <i className=\"copy-icon\">📋</i> Copiar Todos Resultados\r\n                  </button>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            {/* Exibição dos resultados */}\r\n            {fileResults.length > 0 && (\r\n              <div className=\"results-section\">\r\n                <h2>Resultados Processados ({fileResults.length})</h2>\r\n                \r\n                <div className=\"results-list\">\r\n                  {fileResults.map((result, index) => (\r\n                    <div \r\n                      key={index} \r\n                      className={`result-item ${result.successful ? 'success' : 'error'} ${selectedResultIndex === index ? 'expanded' : ''}`}\r\n                      onClick={() => handleSelectResult(index)}\r\n                    >\r\n                      <div className=\"result-header\">\r\n                        <h3 className=\"file-name\">{result.fileName}</h3>\r\n                        <span className={`status-badge ${result.successful ? 'success' : 'error'}`}>\r\n                          {result.successful ? 'Processado' : 'Erro'}\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      {result.successful ? (\r\n                        <>\r\n                          <div className=\"result-summary\">\r\n                            <p className=\"patient-name\">Paciente: {result.patientName}</p>\r\n                            <p className=\"exams-count\">{result.exams.length} exames encontrados</p>\r\n                          </div>\r\n                          \r\n                          {selectedResultIndex === index && (\r\n                            <div className=\"result-details\">\r\n                              <div className=\"exams-list\">\r\n                                {result.exams.map((exam, i) => (\r\n                                  <div className=\"exam-row\" key={i}>{exam}</div>\r\n                                ))}\r\n                              </div>\r\n                              \r\n                              <div className=\"result-actions\">\r\n                                <button \r\n                                  className=\"copy-button\"\r\n                                  onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    copyFileResults(result);\r\n                                  }}\r\n                                >\r\n                                  <i className=\"copy-icon\">📋</i> Copiar\r\n                                </button>\r\n                                <button \r\n                                  className=\"print-button\"\r\n                                  onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    printFileResult(index);\r\n                                  }}\r\n                                >\r\n                                  <i className=\"print-icon\">🖨️</i> Imprimir\r\n                                </button>\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                        </>\r\n                      ) : (\r\n                        <div className=\"error-message\">\r\n                          {result.error}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </main>\r\n      \r\n      {/* Esconder o footer no modo de impressão */}\r\n      {!printMode && (\r\n        <footer>\r\n          <p>© 2025 - Instituto Paulo Godoi - Sistema de Processamento de Exames</p>\r\n          <p className=\"api-info\">Ambiente: {apiStatus?.env || 'Desconectado'} | API: {API_URL}</p>\r\n        </footer>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}