{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\confi\\\\Downloads\\\\pdf-summarizer\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js melhorado - Suporta múltiplos arquivos com design refinado\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport ErrorHandler from './components/ErrorHandler';\n\n// Função para determinar a URL da API baseada no ambiente\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getApiUrl() {\n  // Em desenvolvimento (local), usa localhost\n  if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\n    return 'http://localhost:5000';\n  }\n\n  // Em produção, usa o domínio do Vercel para o backend\n  return 'https://server-theta-murex.vercel.app';\n}\n\n// URL da API - detecta automaticamente ambiente local ou produção\nconst API_URL = getApiUrl();\nfunction App() {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [summaries, setSummaries] = useState([]);\n  const [patientName, setPatientName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [apiStatus, setApiStatus] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState(null);\n  const [processingStage, setProcessingStage] = useState(null);\n  const [currentProcessingFile, setCurrentProcessingFile] = useState(null);\n  const [processedFiles, setProcessedFiles] = useState(0);\n  const [totalFiles, setTotalFiles] = useState(0);\n  const textAreaRef = useRef(null);\n  const fileInputRef = useRef(null);\n\n  // Verificar status da API ao carregar\n  useEffect(() => {\n    const checkApiStatus = async () => {\n      try {\n        const response = await fetch(`${API_URL}/api/health`);\n        if (response.ok) {\n          const data = await response.json();\n          setApiStatus({\n            status: 'online',\n            env: data.env,\n            url: API_URL\n          });\n          console.log(`API conectada: ${API_URL} (${data.env})`);\n        } else {\n          setApiStatus({\n            status: 'error',\n            message: `Erro ao conectar com a API: ${response.status}`,\n            url: API_URL\n          });\n        }\n      } catch (error) {\n        setApiStatus({\n          status: 'offline',\n          message: 'Não foi possível conectar ao servidor',\n          error: error.message,\n          url: API_URL\n        });\n        console.error('Erro ao verificar status da API:', error);\n      }\n    };\n    checkApiStatus();\n  }, []);\n\n  // Função para tentar reconectar com a API\n  const retryApiConnection = () => {\n    setApiStatus({\n      status: 'checking',\n      message: 'Verificando conexão...',\n      url: API_URL\n    });\n    setTimeout(() => {\n      checkApiStatus();\n    }, 1000);\n  };\n\n  // Função para verificar status da API\n  const checkApiStatus = async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/health`);\n      if (response.ok) {\n        const data = await response.json();\n        setApiStatus({\n          status: 'online',\n          env: data.env,\n          url: API_URL\n        });\n        setError(null);\n      } else {\n        setApiStatus({\n          status: 'error',\n          message: `Erro ao conectar com a API: ${response.status}`,\n          url: API_URL\n        });\n        setError(`Erro ao conectar com o servidor: ${response.status} ${response.statusText}`);\n      }\n    } catch (error) {\n      setApiStatus({\n        status: 'offline',\n        message: 'Não foi possível conectar ao servidor',\n        error: error.message,\n        url: API_URL\n      });\n      setError(`Falha de conexão com o servidor: ${error.message}`);\n    }\n  };\n\n  // Função para limpar os resultados e resetar o estado\n  const handleReset = () => {\n    setSummaries([]);\n    setPatientName('');\n    setError(null);\n    setFiles([]);\n    setUploadStatus(null);\n    setProcessingStage(null);\n    setCurrentProcessingFile(null);\n    setProcessedFiles(0);\n    setTotalFiles(0);\n\n    // Resetar o input de arquivo\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  const handleFileChange = e => {\n    const selectedFiles = Array.from(e.target.files);\n    setUploadStatus(null);\n    setProcessingStage(null);\n\n    // Filtrar apenas arquivos PDF\n    const pdfFiles = selectedFiles.filter(file => file.type === 'application/pdf');\n    if (pdfFiles.length === 0 && selectedFiles.length > 0) {\n      setError('Por favor, selecione apenas arquivos PDF válidos.');\n      return;\n    }\n\n    // Adicionar aos arquivos existentes\n    setFiles(prevFiles => [...prevFiles, ...pdfFiles]);\n    setError(null);\n  };\n\n  // Função para remover um arquivo da lista\n  const removeFile = index => {\n    setFiles(prevFiles => prevFiles.filter((_, i) => i !== index));\n  };\n\n  // Função para limpar todos os arquivos\n  const clearAllFiles = () => {\n    setFiles([]);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (files.length === 0) {\n      setError('Por favor, selecione pelo menos um arquivo PDF válido.');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    setUploadStatus({\n      stage: 'iniciando',\n      message: 'Iniciando processamento...'\n    });\n    setProcessingStage('upload');\n    setTotalFiles(files.length);\n    setProcessedFiles(0);\n\n    // Processar arquivos um por um\n    const allSummaries = [];\n    const fileErrors = [];\n    const patientNames = {}; // Para armazenar nomes de pacientes por arquivo\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      setCurrentProcessingFile(file.name);\n      try {\n        const formData = new FormData();\n        formData.append('pdf', file);\n\n        // Atualizar status para o arquivo atual\n        setUploadStatus({\n          stage: 'enviando',\n          message: `Enviando arquivo ${i + 1}/${files.length}: ${file.name}`\n        });\n        console.log(`Enviando arquivo ${file.name} para ${API_URL}/api/upload`);\n        const response = await fetch(`${API_URL}/api/upload`, {\n          method: 'POST',\n          body: formData\n        });\n        setProcessingStage('processing');\n        setUploadStatus({\n          stage: 'processando',\n          message: `Processando arquivo ${i + 1}/${files.length}: ${file.name}`\n        });\n        if (!response.ok) {\n          let errorMessage = `Erro ${response.status}: ${response.statusText}`;\n          try {\n            const errorData = await response.json();\n            if (errorData.message) {\n              errorMessage = errorData.message;\n            }\n          } catch (jsonError) {\n            // Continuar com a mensagem de erro padrão se não puder ler JSON\n          }\n          throw new Error(`Erro no arquivo ${file.name}: ${errorMessage}`);\n        }\n        const data = await response.json();\n\n        // Verificar se temos resultados válidos\n        if (!data.summaries || data.summaries.length === 0) {\n          throw new Error(`Não foi possível extrair informações do documento ${file.name}.`);\n        }\n\n        // Armazenar o nome do paciente para este arquivo\n        if (data.patientName) {\n          patientNames[file.name] = data.patientName;\n        }\n\n        // Adicionar informação do nome do arquivo e paciente aos resultados\n        const fileSummaries = data.summaries.map(summary => ({\n          ...summary,\n          fileName: file.name,\n          patientName: data.patientName // Incluir o nome do paciente em cada resumo\n        }));\n\n        // Acumular os resultados\n        allSummaries.push(...fileSummaries);\n\n        // Se for o primeiro arquivo processado com sucesso, usar seu nome de paciente\n        // apenas para exibição na interface\n        if (i === 0 && data.patientName) {\n          setPatientName(data.patientName);\n        }\n\n        // Atualizar contador de arquivos processados\n        setProcessedFiles(i + 1);\n      } catch (error) {\n        console.error(`Erro ao processar o arquivo ${file.name}:`, error);\n        fileErrors.push({\n          fileName: file.name,\n          error: error.message\n        });\n        // Continuar para o próximo arquivo, mas registrar o erro\n      }\n    }\n\n    // Definir o processamento como concluído\n    setProcessingStage('complete');\n    if (allSummaries.length > 0) {\n      setSummaries(allSummaries);\n      if (fileErrors.length > 0) {\n        // Alguns arquivos foram processados com sucesso, mas outros falharam\n        setUploadStatus({\n          stage: 'aviso',\n          message: `Processados ${allSummaries.length} resultados de ${files.length - fileErrors.length}/${files.length} arquivos.`\n        });\n\n        // Definir mensagens de erro para os arquivos que falharam\n        const errorMessage = fileErrors.map(err => `${err.fileName}: ${err.error}`).join('\\n');\n        setError(`Alguns arquivos não puderam ser processados:\\n${errorMessage}`);\n      } else {\n        // Todos os arquivos foram processados com sucesso\n        setUploadStatus({\n          stage: 'sucesso',\n          message: `Processamento concluído: ${allSummaries.length} resultados de ${files.length} arquivos.`\n        });\n        setError(null);\n      }\n    } else {\n      // Nenhum arquivo foi processado com sucesso\n      setUploadStatus({\n        stage: 'erro',\n        message: 'Nenhum resultado foi extraído dos arquivos.'\n      });\n\n      // Definir mensagens de erro para todos os arquivos\n      const errorMessage = fileErrors.map(err => `${err.fileName}: ${err.error}`).join('\\n');\n      setError(`Falha ao processar todos os arquivos:\\n${errorMessage}`);\n    }\n    setLoading(false);\n    setCurrentProcessingFile(null);\n  };\n\n  // Função para obter descrição amigável do método de extração\n  const getMethodDescription = method => {\n    const descriptions = {\n      'direto': 'processamento direto',\n      'desprotegido': 'remoção de proteção',\n      'reparado': 'reparo de estrutura',\n      'gs_reparado': 'reparo avançado',\n      'partes': 'processamento em partes',\n      'falha': 'falha no processamento'\n    };\n    return descriptions[method] || method;\n  };\n\n  // Função para extrair apenas os exames sem seções ou formatação extra\n  const extractOnlyExams = () => {\n    let allExams = [];\n    summaries.forEach(summary => {\n      const lines = summary.content.split('\\n');\n      lines.forEach(line => {\n        // Filtrar linhas que começam com SÉRIE, HEMOGRAMA, EXAMES ou Paciente:\n        if (line.trim() && !line.match(/^SÉRIE|^HEMOGRAMA|^EXAMES/i) && !line.match(/^Paciente:/i)) {\n          // Adicionar o nome do arquivo como prefixo se houver múltiplos arquivos\n          if (files.length > 1 && summary.fileName) {\n            allExams.push(`[${summary.fileName}] ${line.trim()}`);\n          } else {\n            allExams.push(line.trim());\n          }\n        }\n      });\n    });\n\n    // Remover duplicatas\n    allExams = [...new Set(allExams)];\n    return allExams;\n  };\n\n  // Gerar texto formatado simplificado para cópia\n  const getSimplifiedTextForCopy = () => {\n    if (summaries.length === 0) return '';\n\n    // Agrupar resultados por arquivo\n    const resultsByFile = {};\n\n    // Primeiro, vamos agrupar os resultados por arquivo\n    summaries.forEach(summary => {\n      const fileName = summary.fileName || 'arquivo_desconhecido';\n      if (!resultsByFile[fileName]) {\n        resultsByFile[fileName] = {\n          patientName: summary.patientName || patientName || \"Paciente\",\n          results: []\n        };\n      }\n\n      // Adicionar linhas de resultado deste arquivo\n      const lines = summary.content.split('\\n');\n      lines.forEach(line => {\n        // Ignorar linhas vazias, cabeçalhos padrão e linhas com \"Paciente:\"\n        if (line.trim() && !line.match(/^SÉRIE|^HEMOGRAMA|^EXAMES/i) && !line.match(/^Paciente:/i)) {\n          resultsByFile[fileName].results.push(line.trim());\n        }\n      });\n    });\n\n    // Para fins de diagnóstico\n    console.log(\"Arquivos e pacientes:\", resultsByFile);\n\n    // Montar o texto final com separadores entre arquivos\n    let formattedText = '';\n    let isFirstFile = true;\n    Object.keys(resultsByFile).forEach(fileName => {\n      // Não adicionar separador antes do primeiro arquivo\n      if (!isFirstFile) {\n        formattedText += '\\n\\n///////////////////////////////////////\\n\\n';\n      } else {\n        isFirstFile = false;\n      }\n\n      // Adicionar o nome do paciente deste arquivo (se disponível)\n      const fileData = resultsByFile[fileName];\n      if (fileData.patientName) {\n        formattedText += `PACIENTE: ${fileData.patientName}\\n\\n`;\n      }\n\n      // Adicionar resultados deste arquivo (removendo duplicações)\n      const uniqueResults = [...new Set(fileData.results)];\n      uniqueResults.forEach(result => {\n        formattedText += `${result}\\n`;\n      });\n    });\n    return formattedText;\n  };\n\n  // Função para copiar texto para a área de transferência\n  const copyToClipboard = () => {\n    if (textAreaRef.current) {\n      textAreaRef.current.select();\n      document.execCommand('copy');\n\n      // Mostrar uma mensagem de sucesso temporária\n      const originalText = textAreaRef.current.value;\n      textAreaRef.current.value = '✓ Resultados copiados com sucesso!';\n      setTimeout(() => {\n        textAreaRef.current.value = originalText;\n      }, 1500);\n    }\n  };\n\n  // Calcular o progresso total do processamento\n  const calculateProgress = () => {\n    if (totalFiles === 0) return 0;\n    return Math.round(processedFiles / totalFiles * 100);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"institute-logo\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"logo-text\",\n          children: \"Instituto Paulo Godoi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Extrator de Resultados de Exames\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"subtitle\",\n        children: \"Sistema interno para processamento de laudos laboratoriais\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this), apiStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `api-status ${apiStatus.status}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status-indicator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 13\n        }, this), apiStatus.status === 'online' ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"API conectada (\", apiStatus.env, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 15\n        }, this) : apiStatus.status === 'checking' ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Verificando conex\\xE3o...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Erro de conex\\xE3o: \", apiStatus.message, /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"retry-button\",\n            onClick: retryApiConnection,\n            children: \"Reconectar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [((apiStatus === null || apiStatus === void 0 ? void 0 : apiStatus.status) === 'offline' || (apiStatus === null || apiStatus === void 0 ? void 0 : apiStatus.status) === 'error') && /*#__PURE__*/_jsxDEV(ErrorHandler, {\n        error: `Não foi possível conectar ao servidor. ${apiStatus.message}`,\n        onRetry: retryApiConnection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"uploader-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              id: \"pdf-upload\",\n              ref: fileInputRef,\n              onChange: handleFileChange,\n              accept: \"application/pdf\",\n              multiple: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"pdf-upload\",\n              className: \"file-label\",\n              children: files.length > 0 ? `${files.length} arquivo(s) selecionado(s)` : 'Escolher arquivos PDF de exames'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 13\n          }, this), files.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"selected-files-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Arquivos Selecionados\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"files-actions\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"clear-files-button\",\n                onClick: clearAllFiles,\n                children: \"Remover Todos\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"selected-files-list\",\n              children: files.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"file-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"file-name\",\n                  children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"pdf-icon\",\n                    children: \"\\uD83D\\uDCC4\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 496,\n                    columnNumber: 25\n                  }, this), \" \", file.name, /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"file-size\",\n                    children: [\"(\", (file.size / 1024).toFixed(1), \" KB)\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 497,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 495,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"remove-file-button\",\n                  onClick: () => removeFile(index),\n                  \"aria-label\": `Remover ${file.name}`,\n                  children: \"\\u2716\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 499,\n                  columnNumber: 23\n                }, this)]\n              }, `${file.name}-${index}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 494,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"upload-button\",\n            disabled: files.length === 0 || (apiStatus === null || apiStatus === void 0 ? void 0 : apiStatus.status) !== 'online' || processingStage === 'upload' || processingStage === 'processing',\n            children: processingStage === 'upload' || processingStage === 'processing' ? 'Processando...' : 'Extrair Resultados'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), (processingStage === 'upload' || processingStage === 'processing') && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `progress-bar ${processingStage}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-indicator\",\n              style: {\n                width: `${calculateProgress()}%`,\n                animation: 'none'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-status\",\n            children: currentProcessingFile ? `${processingStage === 'upload' ? 'Enviando' : 'Processando'}: ${currentProcessingFile} (${processedFiles}/${totalFiles})` : processingStage === 'upload' ? 'Enviando arquivo...' : 'Processando documento...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 13\n        }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `upload-status ${uploadStatus.stage}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"status-icon\",\n            children: uploadStatus.stage === 'sucesso' ? '✓' : uploadStatus.stage === 'erro' ? '✗' : uploadStatus.stage === 'aviso' ? '⚠️' : '⟳'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"status-message\",\n            children: uploadStatus.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 13\n        }, this), uploadStatus && uploadStatus.stage === 'erro' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pdf-tips\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Poss\\xEDveis solu\\xE7\\xF5es:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Verifique se os PDFs n\\xE3o est\\xE3o protegidos por senha\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Tente salvar os PDFs novamente usando \\\"Salvar como\\\" no Adobe Reader\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Se poss\\xEDvel, tente imprimir os documentos para novos PDFs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Entre em contato com o laborat\\xF3rio para obter vers\\xF5es digitais alternativas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Se o problema persistir, use uma ferramenta online para converter os PDFs para outro formato\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 13\n        }, this), uploadStatus && uploadStatus.stage === 'aviso' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"processing-notice\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Os documentos foram processados com sucesso, mas podem conter algumas imprecis\\xF5es devido ao formato dos arquivos originais.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Verifique cuidadosamente os resultados extra\\xEDdos antes de us\\xE1-los.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this), loading && !processingStage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading\",\n        children: \"Processando os documentos, por favor aguarde...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 41\n      }, this), error && !uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: [\"Erro: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 36\n      }, this), error && uploadStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-errors\",\n        children: /*#__PURE__*/_jsxDEV(\"details\", {\n          children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n            children: \"Detalhes dos erros\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"error-details\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 11\n      }, this), summaries.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reset-button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-button\",\n          onClick: handleReset,\n          children: \"Novo Documento\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-container\",\n        children: summaries.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"empty-message\",\n          children: \"Os resultados dos exames aparecer\\xE3o aqui.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-view-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"RESULTADOS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 15\n          }, this), summaries.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"file-count\",\n              children: [summaries.length, \" resultados extra\\xEDdos\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 611,\n              columnNumber: 19\n            }, this), files.length > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"multi-file-notice\",\n              children: [\"Exibindo dados de \", files.length, \" arquivos\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 613,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"copy-instructions\",\n            children: \"Lista de resultados para copiar e colar:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-area-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              ref: textAreaRef,\n              className: \"results-text-area\",\n              value: getSimplifiedTextForCopy(),\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: copyToClipboard,\n              className: \"copy-button\",\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"copy-icon\",\n                children: \"\\uD83D\\uDCCB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 626,\n                columnNumber: 19\n              }, this), \" Copiar para \\xC1rea de Transfer\\xEAncia\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 625,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2025 - Instituto Paulo Godoi - Sistema de Processamento de Exames\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"api-info\",\n        children: [\"Ambiente: \", (apiStatus === null || apiStatus === void 0 ? void 0 : apiStatus.env) || 'Desconectado', \" | API: \", API_URL]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 426,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"CEVOrOFFnHxyIQ9I2UYpNvctW54=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ErrorHandler","jsxDEV","_jsxDEV","getApiUrl","window","location","hostname","API_URL","App","_s","files","setFiles","summaries","setSummaries","patientName","setPatientName","loading","setLoading","error","setError","apiStatus","setApiStatus","uploadStatus","setUploadStatus","processingStage","setProcessingStage","currentProcessingFile","setCurrentProcessingFile","processedFiles","setProcessedFiles","totalFiles","setTotalFiles","textAreaRef","fileInputRef","checkApiStatus","response","fetch","ok","data","json","status","env","url","console","log","message","retryApiConnection","setTimeout","statusText","handleReset","current","value","handleFileChange","e","selectedFiles","Array","from","target","pdfFiles","filter","file","type","length","prevFiles","removeFile","index","_","i","clearAllFiles","handleSubmit","preventDefault","stage","allSummaries","fileErrors","patientNames","name","formData","FormData","append","method","body","errorMessage","errorData","jsonError","Error","fileSummaries","map","summary","fileName","push","err","join","getMethodDescription","descriptions","extractOnlyExams","allExams","forEach","lines","content","split","line","trim","match","Set","getSimplifiedTextForCopy","resultsByFile","results","formattedText","isFirstFile","Object","keys","fileData","uniqueResults","result","copyToClipboard","select","document","execCommand","originalText","calculateProgress","Math","round","className","children","_jsxFileName","lineNumber","columnNumber","onClick","onRetry","onSubmit","id","ref","onChange","accept","multiple","htmlFor","size","toFixed","disabled","style","width","animation","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/confi/Downloads/pdf-summarizer/client/src/App.js"],"sourcesContent":["// App.js melhorado - Suporta múltiplos arquivos com design refinado\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport './App.css';\r\nimport ErrorHandler from './components/ErrorHandler';\r\n\r\n// Função para determinar a URL da API baseada no ambiente\r\nfunction getApiUrl() {\r\n  // Em desenvolvimento (local), usa localhost\r\n  if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\r\n    return 'http://localhost:5000';\r\n  }\r\n  \r\n  // Em produção, usa o domínio do Vercel para o backend\r\n  return 'https://server-theta-murex.vercel.app';\r\n}\r\n\r\n// URL da API - detecta automaticamente ambiente local ou produção\r\nconst API_URL = getApiUrl();\r\n\r\nfunction App() {\r\n  const [files, setFiles] = useState([]);\r\n  const [summaries, setSummaries] = useState([]);\r\n  const [patientName, setPatientName] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [apiStatus, setApiStatus] = useState(null);\r\n  const [uploadStatus, setUploadStatus] = useState(null);\r\n  const [processingStage, setProcessingStage] = useState(null);\r\n  const [currentProcessingFile, setCurrentProcessingFile] = useState(null);\r\n  const [processedFiles, setProcessedFiles] = useState(0);\r\n  const [totalFiles, setTotalFiles] = useState(0);\r\n  const textAreaRef = useRef(null);\r\n  const fileInputRef = useRef(null);\r\n\r\n  // Verificar status da API ao carregar\r\n  useEffect(() => {\r\n    const checkApiStatus = async () => {\r\n      try {\r\n        const response = await fetch(`${API_URL}/api/health`);\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setApiStatus({\r\n            status: 'online',\r\n            env: data.env,\r\n            url: API_URL\r\n          });\r\n          console.log(`API conectada: ${API_URL} (${data.env})`);\r\n        } else {\r\n          setApiStatus({\r\n            status: 'error',\r\n            message: `Erro ao conectar com a API: ${response.status}`,\r\n            url: API_URL\r\n          });\r\n        }\r\n      } catch (error) {\r\n        setApiStatus({\r\n          status: 'offline',\r\n          message: 'Não foi possível conectar ao servidor',\r\n          error: error.message,\r\n          url: API_URL\r\n        });\r\n        console.error('Erro ao verificar status da API:', error);\r\n      }\r\n    };\r\n\r\n    checkApiStatus();\r\n  }, []);\r\n\r\n  // Função para tentar reconectar com a API\r\n  const retryApiConnection = () => {\r\n    setApiStatus({\r\n      status: 'checking',\r\n      message: 'Verificando conexão...',\r\n      url: API_URL\r\n    });\r\n    \r\n    setTimeout(() => {\r\n      checkApiStatus();\r\n    }, 1000);\r\n  };\r\n  \r\n  // Função para verificar status da API\r\n  const checkApiStatus = async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/api/health`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setApiStatus({\r\n          status: 'online',\r\n          env: data.env,\r\n          url: API_URL\r\n        });\r\n        setError(null);\r\n      } else {\r\n        setApiStatus({\r\n          status: 'error',\r\n          message: `Erro ao conectar com a API: ${response.status}`,\r\n          url: API_URL\r\n        });\r\n        setError(`Erro ao conectar com o servidor: ${response.status} ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setApiStatus({\r\n        status: 'offline',\r\n        message: 'Não foi possível conectar ao servidor',\r\n        error: error.message,\r\n        url: API_URL\r\n      });\r\n      setError(`Falha de conexão com o servidor: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // Função para limpar os resultados e resetar o estado\r\n  const handleReset = () => {\r\n    setSummaries([]);\r\n    setPatientName('');\r\n    setError(null);\r\n    setFiles([]);\r\n    setUploadStatus(null);\r\n    setProcessingStage(null);\r\n    setCurrentProcessingFile(null);\r\n    setProcessedFiles(0);\r\n    setTotalFiles(0);\r\n    \r\n    // Resetar o input de arquivo\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = '';\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (e) => {\r\n    const selectedFiles = Array.from(e.target.files);\r\n    setUploadStatus(null);\r\n    setProcessingStage(null);\r\n    \r\n    // Filtrar apenas arquivos PDF\r\n    const pdfFiles = selectedFiles.filter(file => file.type === 'application/pdf');\r\n    \r\n    if (pdfFiles.length === 0 && selectedFiles.length > 0) {\r\n      setError('Por favor, selecione apenas arquivos PDF válidos.');\r\n      return;\r\n    }\r\n    \r\n    // Adicionar aos arquivos existentes\r\n    setFiles(prevFiles => [...prevFiles, ...pdfFiles]);\r\n    setError(null);\r\n  };\r\n\r\n  // Função para remover um arquivo da lista\r\n  const removeFile = (index) => {\r\n    setFiles(prevFiles => prevFiles.filter((_, i) => i !== index));\r\n  };\r\n\r\n  // Função para limpar todos os arquivos\r\n  const clearAllFiles = () => {\r\n    setFiles([]);\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = '';\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (files.length === 0) {\r\n      setError('Por favor, selecione pelo menos um arquivo PDF válido.');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    setUploadStatus({ stage: 'iniciando', message: 'Iniciando processamento...' });\r\n    setProcessingStage('upload');\r\n    setTotalFiles(files.length);\r\n    setProcessedFiles(0);\r\n\r\n    // Processar arquivos um por um\r\n    const allSummaries = [];\r\n    const fileErrors = [];\r\n    const patientNames = {}; // Para armazenar nomes de pacientes por arquivo\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      const file = files[i];\r\n      setCurrentProcessingFile(file.name);\r\n      \r\n      try {\r\n        const formData = new FormData();\r\n        formData.append('pdf', file);\r\n        \r\n        // Atualizar status para o arquivo atual\r\n        setUploadStatus({ \r\n          stage: 'enviando', \r\n          message: `Enviando arquivo ${i+1}/${files.length}: ${file.name}`\r\n        });\r\n        \r\n        console.log(`Enviando arquivo ${file.name} para ${API_URL}/api/upload`);\r\n        const response = await fetch(`${API_URL}/api/upload`, {\r\n          method: 'POST',\r\n          body: formData,\r\n        });\r\n        \r\n        setProcessingStage('processing');\r\n        setUploadStatus({ \r\n          stage: 'processando', \r\n          message: `Processando arquivo ${i+1}/${files.length}: ${file.name}`\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          let errorMessage = `Erro ${response.status}: ${response.statusText}`;\r\n          \r\n          try {\r\n            const errorData = await response.json();\r\n            if (errorData.message) {\r\n              errorMessage = errorData.message;\r\n            }\r\n          } catch (jsonError) {\r\n            // Continuar com a mensagem de erro padrão se não puder ler JSON\r\n          }\r\n          \r\n          throw new Error(`Erro no arquivo ${file.name}: ${errorMessage}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        \r\n        // Verificar se temos resultados válidos\r\n        if (!data.summaries || data.summaries.length === 0) {\r\n          throw new Error(`Não foi possível extrair informações do documento ${file.name}.`);\r\n        }\r\n        \r\n        // Armazenar o nome do paciente para este arquivo\r\n        if (data.patientName) {\r\n          patientNames[file.name] = data.patientName;\r\n        }\r\n        \r\n        // Adicionar informação do nome do arquivo e paciente aos resultados\r\n        const fileSummaries = data.summaries.map(summary => ({\r\n          ...summary,\r\n          fileName: file.name,\r\n          patientName: data.patientName // Incluir o nome do paciente em cada resumo\r\n        }));\r\n        \r\n        // Acumular os resultados\r\n        allSummaries.push(...fileSummaries);\r\n        \r\n        // Se for o primeiro arquivo processado com sucesso, usar seu nome de paciente\r\n        // apenas para exibição na interface\r\n        if (i === 0 && data.patientName) {\r\n          setPatientName(data.patientName);\r\n        }\r\n        \r\n        // Atualizar contador de arquivos processados\r\n        setProcessedFiles(i + 1);\r\n        \r\n      } catch (error) {\r\n        console.error(`Erro ao processar o arquivo ${file.name}:`, error);\r\n        fileErrors.push({ fileName: file.name, error: error.message });\r\n        // Continuar para o próximo arquivo, mas registrar o erro\r\n      }\r\n    }\r\n    \r\n    // Definir o processamento como concluído\r\n    setProcessingStage('complete');\r\n    \r\n    if (allSummaries.length > 0) {\r\n      setSummaries(allSummaries);\r\n      \r\n      if (fileErrors.length > 0) {\r\n        // Alguns arquivos foram processados com sucesso, mas outros falharam\r\n        setUploadStatus({ \r\n          stage: 'aviso', \r\n          message: `Processados ${allSummaries.length} resultados de ${files.length - fileErrors.length}/${files.length} arquivos.`\r\n        });\r\n        \r\n        // Definir mensagens de erro para os arquivos que falharam\r\n        const errorMessage = fileErrors.map(err => `${err.fileName}: ${err.error}`).join('\\n');\r\n        setError(`Alguns arquivos não puderam ser processados:\\n${errorMessage}`);\r\n      } else {\r\n        // Todos os arquivos foram processados com sucesso\r\n        setUploadStatus({ \r\n          stage: 'sucesso', \r\n          message: `Processamento concluído: ${allSummaries.length} resultados de ${files.length} arquivos.`\r\n        });\r\n        setError(null);\r\n      }\r\n    } else {\r\n      // Nenhum arquivo foi processado com sucesso\r\n      setUploadStatus({ \r\n        stage: 'erro', \r\n        message: 'Nenhum resultado foi extraído dos arquivos.'\r\n      });\r\n      \r\n      // Definir mensagens de erro para todos os arquivos\r\n      const errorMessage = fileErrors.map(err => `${err.fileName}: ${err.error}`).join('\\n');\r\n      setError(`Falha ao processar todos os arquivos:\\n${errorMessage}`);\r\n    }\r\n    \r\n    setLoading(false);\r\n    setCurrentProcessingFile(null);\r\n  };\r\n\r\n  // Função para obter descrição amigável do método de extração\r\n  const getMethodDescription = (method) => {\r\n    const descriptions = {\r\n      'direto': 'processamento direto',\r\n      'desprotegido': 'remoção de proteção',\r\n      'reparado': 'reparo de estrutura',\r\n      'gs_reparado': 'reparo avançado',\r\n      'partes': 'processamento em partes',\r\n      'falha': 'falha no processamento'\r\n    };\r\n    \r\n    return descriptions[method] || method;\r\n  };\r\n\r\n  // Função para extrair apenas os exames sem seções ou formatação extra\r\n  const extractOnlyExams = () => {\r\n    let allExams = [];\r\n    \r\n    summaries.forEach((summary) => {\r\n      const lines = summary.content.split('\\n');\r\n      \r\n      lines.forEach((line) => {\r\n        // Filtrar linhas que começam com SÉRIE, HEMOGRAMA, EXAMES ou Paciente:\r\n        if (line.trim() && \r\n            !line.match(/^SÉRIE|^HEMOGRAMA|^EXAMES/i) && \r\n            !line.match(/^Paciente:/i)) {\r\n          // Adicionar o nome do arquivo como prefixo se houver múltiplos arquivos\r\n          if (files.length > 1 && summary.fileName) {\r\n            allExams.push(`[${summary.fileName}] ${line.trim()}`);\r\n          } else {\r\n            allExams.push(line.trim());\r\n          }\r\n        }\r\n      });\r\n    });\r\n    \r\n    // Remover duplicatas\r\n    allExams = [...new Set(allExams)];\r\n    \r\n    return allExams;\r\n  };\r\n\r\n  // Gerar texto formatado simplificado para cópia\r\n  const getSimplifiedTextForCopy = () => {\r\n    if (summaries.length === 0) return '';\r\n    \r\n    // Agrupar resultados por arquivo\r\n    const resultsByFile = {};\r\n    \r\n    // Primeiro, vamos agrupar os resultados por arquivo\r\n    summaries.forEach((summary) => {\r\n      const fileName = summary.fileName || 'arquivo_desconhecido';\r\n      \r\n      if (!resultsByFile[fileName]) {\r\n        resultsByFile[fileName] = {\r\n          patientName: summary.patientName || patientName || \"Paciente\",\r\n          results: []\r\n        };\r\n      }\r\n      \r\n      // Adicionar linhas de resultado deste arquivo\r\n      const lines = summary.content.split('\\n');\r\n      lines.forEach((line) => {\r\n        // Ignorar linhas vazias, cabeçalhos padrão e linhas com \"Paciente:\"\r\n        if (line.trim() && \r\n            !line.match(/^SÉRIE|^HEMOGRAMA|^EXAMES/i) && \r\n            !line.match(/^Paciente:/i)) {\r\n          resultsByFile[fileName].results.push(line.trim());\r\n        }\r\n      });\r\n    });\r\n    \r\n    // Para fins de diagnóstico\r\n    console.log(\"Arquivos e pacientes:\", resultsByFile);\r\n    \r\n    // Montar o texto final com separadores entre arquivos\r\n    let formattedText = '';\r\n    let isFirstFile = true;\r\n    \r\n    Object.keys(resultsByFile).forEach((fileName) => {\r\n      // Não adicionar separador antes do primeiro arquivo\r\n      if (!isFirstFile) {\r\n        formattedText += '\\n\\n///////////////////////////////////////\\n\\n';\r\n      } else {\r\n        isFirstFile = false;\r\n      }\r\n      \r\n      // Adicionar o nome do paciente deste arquivo (se disponível)\r\n      const fileData = resultsByFile[fileName];\r\n      if (fileData.patientName) {\r\n        formattedText += `PACIENTE: ${fileData.patientName}\\n\\n`;\r\n      }\r\n      \r\n      // Adicionar resultados deste arquivo (removendo duplicações)\r\n      const uniqueResults = [...new Set(fileData.results)];\r\n      uniqueResults.forEach(result => {\r\n        formattedText += `${result}\\n`;\r\n      });\r\n    });\r\n    \r\n    return formattedText;\r\n  };\r\n\r\n  // Função para copiar texto para a área de transferência\r\n  const copyToClipboard = () => {\r\n    if (textAreaRef.current) {\r\n      textAreaRef.current.select();\r\n      document.execCommand('copy');\r\n      \r\n      // Mostrar uma mensagem de sucesso temporária\r\n      const originalText = textAreaRef.current.value;\r\n      textAreaRef.current.value = '✓ Resultados copiados com sucesso!';\r\n      \r\n      setTimeout(() => {\r\n        textAreaRef.current.value = originalText;\r\n      }, 1500);\r\n    }\r\n  };\r\n\r\n  // Calcular o progresso total do processamento\r\n  const calculateProgress = () => {\r\n    if (totalFiles === 0) return 0;\r\n    return Math.round((processedFiles / totalFiles) * 100);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div className=\"institute-logo\">\r\n          <span className=\"logo-text\">Instituto Paulo Godoi</span>\r\n        </div>\r\n        <h1>Extrator de Resultados de Exames</h1>\r\n        <p className=\"subtitle\">Sistema interno para processamento de laudos laboratoriais</p>\r\n        \r\n        {/* Indicador de status da API */}\r\n        {apiStatus && (\r\n          <div className={`api-status ${apiStatus.status}`}>\r\n            <span className=\"status-indicator\"></span>\r\n            {apiStatus.status === 'online' ? (\r\n              <span>API conectada ({apiStatus.env})</span>\r\n            ) : apiStatus.status === 'checking' ? (\r\n              <span>Verificando conexão...</span>\r\n            ) : (\r\n              <span>Erro de conexão: {apiStatus.message} \r\n                <button className=\"retry-button\" onClick={retryApiConnection}>\r\n                  Reconectar\r\n                </button>\r\n              </span>\r\n            )}\r\n          </div>\r\n        )}\r\n      </header>\r\n      <main>\r\n        {/* Mostrar o manipulador de erros para erros de API */}\r\n        {(apiStatus?.status === 'offline' || apiStatus?.status === 'error') && (\r\n          <ErrorHandler \r\n            error={`Não foi possível conectar ao servidor. ${apiStatus.message}`}\r\n            onRetry={retryApiConnection}\r\n          />\r\n        )}\r\n        \r\n        <div className=\"uploader-container\">\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"file-input-container\">\r\n              <input\r\n                type=\"file\"\r\n                id=\"pdf-upload\"\r\n                ref={fileInputRef}\r\n                onChange={handleFileChange}\r\n                accept=\"application/pdf\"\r\n                multiple\r\n              />\r\n              <label htmlFor=\"pdf-upload\" className=\"file-label\">\r\n                {files.length > 0 \r\n                  ? `${files.length} arquivo(s) selecionado(s)` \r\n                  : 'Escolher arquivos PDF de exames'}\r\n              </label>\r\n            </div>\r\n            \r\n            {/* Lista de arquivos selecionados */}\r\n            {files.length > 0 && (\r\n              <div className=\"selected-files-container\">\r\n                <h3>Arquivos Selecionados</h3>\r\n                <div className=\"files-actions\">\r\n                  <button \r\n                    type=\"button\" \r\n                    className=\"clear-files-button\" \r\n                    onClick={clearAllFiles}\r\n                  >\r\n                    Remover Todos\r\n                  </button>\r\n                </div>\r\n                <ul className=\"selected-files-list\">\r\n                  {files.map((file, index) => (\r\n                    <li key={`${file.name}-${index}`} className=\"file-item\">\r\n                      <span className=\"file-name\">\r\n                        <i className=\"pdf-icon\">📄</i> {file.name} \r\n                        <span className=\"file-size\">({(file.size / 1024).toFixed(1)} KB)</span>\r\n                      </span>\r\n                      <button \r\n                        type=\"button\" \r\n                        className=\"remove-file-button\" \r\n                        onClick={() => removeFile(index)}\r\n                        aria-label={`Remover ${file.name}`}\r\n                      >\r\n                        ✖\r\n                      </button>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n            \r\n            <button \r\n              type=\"submit\" \r\n              className=\"upload-button\"\r\n              disabled={files.length === 0 || apiStatus?.status !== 'online' || processingStage === 'upload' || processingStage === 'processing'}\r\n            >\r\n              {processingStage === 'upload' || processingStage === 'processing' ? \r\n                'Processando...' : 'Extrair Resultados'}\r\n            </button>\r\n          </form>\r\n          \r\n          {/* Indicador de progresso com barra de progresso visual */}\r\n          {(processingStage === 'upload' || processingStage === 'processing') && (\r\n            <div className=\"progress-bar-container\">\r\n              <div className={`progress-bar ${processingStage}`}>\r\n                <div \r\n                  className=\"progress-indicator\" \r\n                  style={{\r\n                    width: `${calculateProgress()}%`,\r\n                    animation: 'none'\r\n                  }}\r\n                ></div>\r\n              </div>\r\n              <div className=\"progress-status\">\r\n                {currentProcessingFile ? \r\n                  `${processingStage === 'upload' ? 'Enviando' : 'Processando'}: ${currentProcessingFile} (${processedFiles}/${totalFiles})` :\r\n                  processingStage === 'upload' ? 'Enviando arquivo...' : 'Processando documento...'}\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Status de upload */}\r\n          {uploadStatus && (\r\n            <div className={`upload-status ${uploadStatus.stage}`}>\r\n              <span className=\"status-icon\">\r\n                {uploadStatus.stage === 'sucesso' ? '✓' : \r\n                uploadStatus.stage === 'erro' ? '✗' : \r\n                uploadStatus.stage === 'aviso' ? '⚠️' : '⟳'}\r\n              </span>\r\n              <span className=\"status-message\">{uploadStatus.message}</span>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Dicas para PDFs problemáticos */}\r\n          {uploadStatus && uploadStatus.stage === 'erro' && (\r\n            <div className=\"pdf-tips\">\r\n              <h4>Possíveis soluções:</h4>\r\n              <ul>\r\n                <li>Verifique se os PDFs não estão protegidos por senha</li>\r\n                <li>Tente salvar os PDFs novamente usando \"Salvar como\" no Adobe Reader</li>\r\n                <li>Se possível, tente imprimir os documentos para novos PDFs</li>\r\n                <li>Entre em contato com o laboratório para obter versões digitais alternativas</li>\r\n                <li>Se o problema persistir, use uma ferramenta online para converter os PDFs para outro formato</li>\r\n              </ul>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Aviso quando o documento foi processado com ajustes */}\r\n          {uploadStatus && uploadStatus.stage === 'aviso' && (\r\n            <div className=\"processing-notice\">\r\n              <p>Os documentos foram processados com sucesso, mas podem conter algumas imprecisões devido ao formato dos arquivos originais.</p>\r\n              <p>Verifique cuidadosamente os resultados extraídos antes de usá-los.</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {loading && !processingStage && <p className=\"loading\">Processando os documentos, por favor aguarde...</p>}\r\n        {error && !uploadStatus && <p className=\"error\">Erro: {error}</p>}\r\n        \r\n        {/* Mensagens de erro específicas para cada arquivo */}\r\n        {error && uploadStatus && (\r\n          <div className=\"file-errors\">\r\n            <details>\r\n              <summary>Detalhes dos erros</summary>\r\n              <pre className=\"error-details\">{error}</pre>\r\n            </details>\r\n          </div>\r\n        )}\r\n        \r\n        {/* Botão para resetar (somente se tiver resultados) */}\r\n        {summaries.length > 0 && (\r\n          <div className=\"reset-button-container\">\r\n            <button \r\n              className=\"reset-button\"\r\n              onClick={handleReset}\r\n            >\r\n              Novo Documento\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"summary-container\">\r\n          {summaries.length === 0 ? (\r\n            <p className=\"empty-message\">Os resultados dos exames aparecerão aqui.</p>\r\n          ) : (\r\n            <div className=\"text-view-container\">\r\n              <h2>RESULTADOS</h2>\r\n              {summaries.length > 0 && (\r\n                <div className=\"summary-info\">\r\n                  <span className=\"file-count\">{summaries.length} resultados extraídos</span>\r\n                  {files.length > 1 && (\r\n                    <span className=\"multi-file-notice\">Exibindo dados de {files.length} arquivos</span>\r\n                  )}\r\n                </div>\r\n              )}\r\n              <p className=\"copy-instructions\">Lista de resultados para copiar e colar:</p>\r\n              <div className=\"text-area-container\">\r\n                <textarea\r\n                  ref={textAreaRef}\r\n                  className=\"results-text-area\"\r\n                  value={getSimplifiedTextForCopy()}\r\n                  readOnly\r\n                />\r\n                <button onClick={copyToClipboard} className=\"copy-button\">\r\n                  <i className=\"copy-icon\">📋</i> Copiar para Área de Transferência\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </main>\r\n      <footer>\r\n        <p>© 2025 - Instituto Paulo Godoi - Sistema de Processamento de Exames</p>\r\n        <p className=\"api-info\">Ambiente: {apiStatus?.env || 'Desconectado'} | API: {API_URL}</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}