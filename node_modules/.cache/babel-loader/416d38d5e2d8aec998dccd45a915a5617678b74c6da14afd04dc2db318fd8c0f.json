{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\confi\\\\Downloads\\\\pdf-summarizer\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js modificado - Com suporte para upload de múltiplos PDFs\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport ErrorHandler from './components/ErrorHandler';\n\n// Função para determinar a URL da API baseada no ambiente\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getApiUrl() {\n  // Em desenvolvimento (local), usa localhost\n  if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\n    return 'http://localhost:5000';\n  }\n\n  // Em produção, usa o domínio do Vercel para o backend\n  return 'https://server-theta-murex.vercel.app';\n}\n\n// URL da API - detecta automaticamente ambiente local ou produção\nconst API_URL = getApiUrl();\nfunction App() {\n  _s();\n  const [files, setFiles] = useState([]); // Alterado para array de arquivos\n  const [summaries, setSummaries] = useState([]);\n  const [patientName, setPatientName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [apiStatus, setApiStatus] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState(null);\n  const [processingStage, setProcessingStage] = useState(null);\n  const [processedFiles, setProcessedFiles] = useState(0); // Para acompanhar progresso\n  const [totalFiles, setTotalFiles] = useState(0); // Total de arquivos a processar\n  const textAreaRef = useRef(null);\n\n  // Verificar status da API ao carregar\n  useEffect(() => {\n    const checkApiStatus = async () => {\n      try {\n        const response = await fetch(`${API_URL}/api/health`);\n        if (response.ok) {\n          const data = await response.json();\n          setApiStatus({\n            status: 'online',\n            env: data.env,\n            url: API_URL\n          });\n          console.log(`API conectada: ${API_URL} (${data.env})`);\n        } else {\n          setApiStatus({\n            status: 'error',\n            message: `Erro ao conectar com a API: ${response.status}`,\n            url: API_URL\n          });\n        }\n      } catch (error) {\n        setApiStatus({\n          status: 'offline',\n          message: 'Não foi possível conectar ao servidor',\n          error: error.message,\n          url: API_URL\n        });\n        console.error('Erro ao verificar status da API:', error);\n      }\n    };\n    checkApiStatus();\n  }, []);\n\n  // Função para tentar reconectar com a API\n  const retryApiConnection = () => {\n    setApiStatus({\n      status: 'checking',\n      message: 'Verificando conexão...',\n      url: API_URL\n    });\n    setTimeout(() => {\n      checkApiStatus();\n    }, 1000);\n  };\n\n  // Função para verificar status da API\n  const checkApiStatus = async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/health`);\n      if (response.ok) {\n        const data = await response.json();\n        setApiStatus({\n          status: 'online',\n          env: data.env,\n          url: API_URL\n        });\n        setError(null);\n      } else {\n        setApiStatus({\n          status: 'error',\n          message: `Erro ao conectar com a API: ${response.status}`,\n          url: API_URL\n        });\n        setError(`Erro ao conectar com o servidor: ${response.status} ${response.statusText}`);\n      }\n    } catch (error) {\n      setApiStatus({\n        status: 'offline',\n        message: 'Não foi possível conectar ao servidor',\n        error: error.message,\n        url: API_URL\n      });\n      setError(`Falha de conexão com o servidor: ${error.message}`);\n    }\n  };\n\n  // Função para limpar os resultados e resetar o estado\n  const handleReset = () => {\n    setSummaries([]);\n    setPatientName('');\n    setError(null);\n    setFiles([]);\n    setUploadStatus(null);\n    setProcessingStage(null);\n    setProcessedFiles(0);\n    setTotalFiles(0);\n  };\n\n  // Modificado para lidar com múltiplos arquivos\n  const handleFileChange = e => {\n    const selectedFiles = Array.from(e.target.files);\n    setUploadStatus(null);\n    setProcessingStage(null);\n\n    // Verificando se todos os arquivos são PDFs\n    const validFiles = selectedFiles.filter(file => file.type === 'application/pdf');\n    if (validFiles.length === 0) {\n      setFiles([]);\n      setError('Por favor, selecione apenas arquivos PDF válidos.');\n    } else if (validFiles.length !== selectedFiles.length) {\n      // Alguns arquivos não são PDFs\n      setFiles(validFiles);\n      setError('Somente os arquivos PDF selecionados serão processados.');\n    } else {\n      setFiles(validFiles);\n      setError(null);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (files.length === 0) {\n      setError('Por favor, selecione pelo menos um arquivo PDF válido.');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    setUploadStatus({\n      stage: 'iniciando',\n      message: 'Iniciando processamento...'\n    });\n    setProcessingStage('upload');\n\n    // Armazenar todos os resultados combinados\n    let allSummaries = [];\n    let combinedPatientName = '';\n    let failedFiles = [];\n\n    // Definir o total de arquivos a processar\n    setTotalFiles(files.length);\n    setProcessedFiles(0);\n    try {\n      // Processar cada arquivo sequencialmente\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n\n        // Atualizar status para o arquivo atual\n        setUploadStatus({\n          stage: 'enviando',\n          message: `Enviando arquivo ${i + 1} de ${files.length}: ${file.name}...`\n        });\n        const formData = new FormData();\n        formData.append('pdf', file);\n        try {\n          console.log(`Enviando arquivo ${i + 1}/${files.length} para ${API_URL}/api/upload`);\n          const response = await fetch(`${API_URL}/api/upload`, {\n            method: 'POST',\n            body: formData\n          });\n          setProcessingStage('processing');\n          setUploadStatus({\n            stage: 'processando',\n            message: `Processando documento ${i + 1} de ${files.length}: ${file.name}...`\n          });\n          if (!response.ok) {\n            let errorMessage = `Erro ${response.status}: ${response.statusText}`;\n            try {\n              const errorData = await response.json();\n              if (errorData.message) {\n                errorMessage = errorData.message;\n              }\n            } catch (jsonError) {\n              // Continuar com a mensagem de erro padrão se não puder ler JSON\n            }\n\n            // Adicionar à lista de falhas, mas continuar processando outros arquivos\n            failedFiles.push({\n              name: file.name,\n              error: errorMessage\n            });\n            console.error(`Erro ao processar arquivo ${file.name}:`, errorMessage);\n          } else {\n            const data = await response.json();\n\n            // Verificar se temos resultados válidos\n            if (data.summaries && data.summaries.length > 0) {\n              // Adicionar prefixo do nome do arquivo aos resultados para identificação\n              const prefixedSummaries = data.summaries.map(summary => ({\n                ...summary,\n                fileName: file.name,\n                content: summary.content\n              }));\n\n              // Adicionar os resultados ao array combinado\n              allSummaries = [...allSummaries, ...prefixedSummaries];\n\n              // Se ainda não temos um nome de paciente ou este arquivo tem um melhor\n              if (!combinedPatientName && data.patientName && data.patientName !== 'Nome do Paciente não identificado') {\n                combinedPatientName = data.patientName;\n              }\n            } else {\n              failedFiles.push({\n                name: file.name,\n                error: 'Não foi possível extrair informações deste documento.'\n              });\n            }\n          }\n        } catch (fileError) {\n          // Registrar erro para este arquivo, mas continuar com os próximos\n          failedFiles.push({\n            name: file.name,\n            error: fileError.message || 'Erro desconhecido ao processar o documento.'\n          });\n          console.error(`Erro ao processar arquivo ${file.name}:`, fileError);\n        }\n\n        // Incrementar contador de arquivos processados\n        setProcessedFiles(i + 1);\n      }\n\n      // Após processar todos os arquivos, atualizar o estado com os resultados\n      if (allSummaries.length > 0) {\n        setSummaries(allSummaries);\n\n        // Definir nome do paciente se encontrado em algum arquivo\n        if (combinedPatientName) {\n          setPatientName(combinedPatientName);\n        } else {\n          setPatientName('Paciente não identificado');\n        }\n\n        // Definir mensagem de status final\n        setProcessingStage('complete');\n        if (failedFiles.length > 0) {\n          // Alguns arquivos falharam\n          setUploadStatus({\n            stage: 'aviso',\n            message: `Processamento concluído com ${failedFiles.length} falhas em ${files.length} arquivos.`\n          });\n        } else {\n          // Todos os arquivos foram processados com sucesso\n          setUploadStatus({\n            stage: 'sucesso',\n            message: `${files.length} documento(s) processado(s) com sucesso!`\n          });\n        }\n      } else {\n        // Nenhum arquivo processado com sucesso\n        setProcessingStage('error');\n        setUploadStatus({\n          stage: 'erro',\n          message: 'Falha ao processar todos os documentos.'\n        });\n        setError(`Nenhum documento pôde ser processado. ${failedFiles.length > 0 ? `Erros: ${failedFiles.map(f => `${f.name}: ${f.error}`).join('; ')}` : ''}`);\n      }\n    } catch (error) {\n      console.error('Erro global ao enviar os arquivos:', error);\n      setProcessingStage('error');\n      setUploadStatus({\n        stage: 'erro',\n        message: 'Falha no processamento dos documentos.'\n      });\n      setError(error.message || 'Erro ao processar os documentos. Tente novamente.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Função para obter descrição amigável do método de extração\n  const getMethodDescription = method => {\n    const descriptions = {\n      'direto': 'processamento direto',\n      'desprotegido': 'remoção de proteção',\n      'reparado': 'reparo de estrutura',\n      'gs_reparado': 'reparo avançado',\n      'partes': 'processamento em partes',\n      'falha': 'falha no processamento'\n    };\n    return descriptions[method] || method;\n  };\n\n  // Função para extrair apenas os exames sem seções ou formatação extra\n  const extractOnlyExams = () => {\n    let allExams = [];\n    summaries.forEach(summary => {\n      const lines = summary.content.split('\\n');\n      lines.forEach(line => {\n        if (line.trim() && !line.match(/^SÉRIE|^HEMOGRAMA|^EXAMES/i)) {\n          allExams.push(line.trim());\n        }\n      });\n    });\n\n    // Remover duplicatas\n    allExams = [...new Set(allExams)];\n    return allExams;\n  };\n\n  // Gerar texto formatado simplificado para cópia\n  const getSimplifiedTextForCopy = () => {\n    // Nome do paciente no topo\n    let formattedText = patientName ? `PACIENTE: ${patientName}\\n\\n` : '';\n\n    // Adicionar cada exame em uma linha\n    const exams = extractOnlyExams();\n    exams.forEach(exam => {\n      formattedText += `${exam}\\n`;\n    });\n    return formattedText;\n  };\n\n  // Função para copiar texto para a área de transferência\n  const copyToClipboard = () => {\n    if (textAreaRef.current) {\n      textAreaRef.current.select();\n      document.execCommand('copy');\n      // Mostrar uma mensagem de sucesso\n      alert('Resultados copiados para a área de transferência!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"institute-logo\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"logo-text\",\n          children: \"Instituto Paulo Godoi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Extrator de Resultados de Exames\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"subtitle\",\n        children: \"Sistema interno para processamento de laudos laboratoriais\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this), apiStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `api-status ${apiStatus.status}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status-indicator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 13\n        }, this), apiStatus.status === 'online' ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"API conectada (\", apiStatus.env, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 15\n        }, this) : apiStatus.status === 'checking' ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Verificando conex\\xE3o...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Erro de conex\\xE3o: \", apiStatus.message, /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"retry-button\",\n            onClick: retryApiConnection,\n            children: \"Reconectar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [((apiStatus === null || apiStatus === void 0 ? void 0 : apiStatus.status) === 'offline' || (apiStatus === null || apiStatus === void 0 ? void 0 : apiStatus.status) === 'error') && /*#__PURE__*/_jsxDEV(ErrorHandler, {\n        error: `Não foi possível conectar ao servidor. ${apiStatus.message}`,\n        onRetry: retryApiConnection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"uploader-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              id: \"pdf-upload\",\n              onChange: handleFileChange,\n              accept: \"application/pdf\",\n              multiple: true // Adicionado atributo multiple para permitir seleção de múltiplos arquivos\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"pdf-upload\",\n              className: \"file-label\",\n              children: files.length > 0 ? `${files.length} arquivo(s) selecionado(s)` : 'Escolher arquivos PDF de exames'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 15\n            }, this), files.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"selected-files\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Arquivos selecionados:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: files.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: file.name\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 421,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"upload-button\",\n            disabled: files.length === 0 || (apiStatus === null || apiStatus === void 0 ? void 0 : apiStatus.status) !== 'online' || processingStage === 'upload' || processingStage === 'processing',\n            children: processingStage === 'upload' || processingStage === 'processing' ? 'Processando...' : 'Extrair Resultados'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this), (processingStage === 'upload' || processingStage === 'processing') && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `progress-bar ${processingStage}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-indicator\",\n              style: {\n                width: totalFiles > 0 ? `${processedFiles / totalFiles * 100}%` : '0%'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-status\",\n            children: [(uploadStatus === null || uploadStatus === void 0 ? void 0 : uploadStatus.message) || 'Processando documentos...', totalFiles > 0 && ` (${processedFiles}/${totalFiles})`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 13\n        }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `upload-status ${uploadStatus.stage}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"status-icon\",\n            children: uploadStatus.stage === 'sucesso' ? '✓' : uploadStatus.stage === 'erro' ? '✗' : uploadStatus.stage === 'aviso' ? '⚠️' : '⟳'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"status-message\",\n            children: uploadStatus.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this), uploadStatus && uploadStatus.stage === 'erro' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pdf-tips\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Poss\\xEDveis solu\\xE7\\xF5es:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Verifique se os PDFs n\\xE3o est\\xE3o protegidos por senha\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Tente salvar os PDFs novamente usando \\\"Salvar como\\\" no Adobe Reader\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Se poss\\xEDvel, tente imprimir os documentos para novos PDFs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Entre em contato com o laborat\\xF3rio para obter vers\\xF5es digitais alternativas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Se o problema persistir, use uma ferramenta online para converter os PDFs para outro formato\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 13\n        }, this), uploadStatus && uploadStatus.stage === 'aviso' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"processing-notice\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Os documentos foram processados, mas podem conter algumas imprecis\\xF5es devido ao formato dos arquivos originais.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Verifique cuidadosamente os resultados extra\\xEDdos antes de us\\xE1-los.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this), loading && !processingStage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading\",\n        children: \"Processando os documentos, por favor aguarde...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 41\n      }, this), error && !uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: [\"Erro: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 36\n      }, this), summaries.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reset-button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-button\",\n          onClick: handleReset,\n          children: \"Novos Documentos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-container\",\n        children: summaries.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"empty-message\",\n          children: \"Os resultados dos exames aparecer\\xE3o aqui.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-view-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Resultados - \", patientName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"copy-instructions\",\n            children: \"Lista de resultados para copiar e colar:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-area-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              ref: textAreaRef,\n              className: \"results-text-area\",\n              value: getSimplifiedTextForCopy(),\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: copyToClipboard,\n              className: \"copy-button\",\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"copy-icon\",\n                children: \"\\uD83D\\uDCCB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 19\n              }, this), \" Copiar para \\xC1rea de Transfer\\xEAncia\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2025 - Instituto Paulo Godoi - Sistema de Processamento de Exames\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"api-info\",\n        children: [\"Ambiente: \", (apiStatus === null || apiStatus === void 0 ? void 0 : apiStatus.env) || 'Desconectado', \" | API: \", API_URL]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 365,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SeZiCYdxym2gO/BcB/d0sORZcLc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ErrorHandler","jsxDEV","_jsxDEV","getApiUrl","window","location","hostname","API_URL","App","_s","files","setFiles","summaries","setSummaries","patientName","setPatientName","loading","setLoading","error","setError","apiStatus","setApiStatus","uploadStatus","setUploadStatus","processingStage","setProcessingStage","processedFiles","setProcessedFiles","totalFiles","setTotalFiles","textAreaRef","checkApiStatus","response","fetch","ok","data","json","status","env","url","console","log","message","retryApiConnection","setTimeout","statusText","handleReset","handleFileChange","e","selectedFiles","Array","from","target","validFiles","filter","file","type","length","handleSubmit","preventDefault","stage","allSummaries","combinedPatientName","failedFiles","i","name","formData","FormData","append","method","body","errorMessage","errorData","jsonError","push","prefixedSummaries","map","summary","fileName","content","fileError","f","join","getMethodDescription","descriptions","extractOnlyExams","allExams","forEach","lines","split","line","trim","match","Set","getSimplifiedTextForCopy","formattedText","exams","exam","copyToClipboard","current","select","document","execCommand","alert","className","children","_jsxFileName","lineNumber","columnNumber","onClick","onRetry","onSubmit","id","onChange","accept","multiple","htmlFor","index","disabled","style","width","ref","value","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/confi/Downloads/pdf-summarizer/client/src/App.js"],"sourcesContent":["// App.js modificado - Com suporte para upload de múltiplos PDFs\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport './App.css';\r\nimport ErrorHandler from './components/ErrorHandler';\r\n\r\n// Função para determinar a URL da API baseada no ambiente\r\nfunction getApiUrl() {\r\n  // Em desenvolvimento (local), usa localhost\r\n  if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\r\n    return 'http://localhost:5000';\r\n  }\r\n  \r\n  // Em produção, usa o domínio do Vercel para o backend\r\n  return 'https://server-theta-murex.vercel.app';\r\n}\r\n\r\n// URL da API - detecta automaticamente ambiente local ou produção\r\nconst API_URL = getApiUrl();\r\n\r\nfunction App() {\r\n  const [files, setFiles] = useState([]); // Alterado para array de arquivos\r\n  const [summaries, setSummaries] = useState([]);\r\n  const [patientName, setPatientName] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [apiStatus, setApiStatus] = useState(null);\r\n  const [uploadStatus, setUploadStatus] = useState(null);\r\n  const [processingStage, setProcessingStage] = useState(null);\r\n  const [processedFiles, setProcessedFiles] = useState(0); // Para acompanhar progresso\r\n  const [totalFiles, setTotalFiles] = useState(0); // Total de arquivos a processar\r\n  const textAreaRef = useRef(null);\r\n\r\n  // Verificar status da API ao carregar\r\n  useEffect(() => {\r\n    const checkApiStatus = async () => {\r\n      try {\r\n        const response = await fetch(`${API_URL}/api/health`);\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setApiStatus({\r\n            status: 'online',\r\n            env: data.env,\r\n            url: API_URL\r\n          });\r\n          console.log(`API conectada: ${API_URL} (${data.env})`);\r\n        } else {\r\n          setApiStatus({\r\n            status: 'error',\r\n            message: `Erro ao conectar com a API: ${response.status}`,\r\n            url: API_URL\r\n          });\r\n        }\r\n      } catch (error) {\r\n        setApiStatus({\r\n          status: 'offline',\r\n          message: 'Não foi possível conectar ao servidor',\r\n          error: error.message,\r\n          url: API_URL\r\n        });\r\n        console.error('Erro ao verificar status da API:', error);\r\n      }\r\n    };\r\n\r\n    checkApiStatus();\r\n  }, []);\r\n\r\n  // Função para tentar reconectar com a API\r\n  const retryApiConnection = () => {\r\n    setApiStatus({\r\n      status: 'checking',\r\n      message: 'Verificando conexão...',\r\n      url: API_URL\r\n    });\r\n    \r\n    setTimeout(() => {\r\n      checkApiStatus();\r\n    }, 1000);\r\n  };\r\n  \r\n  // Função para verificar status da API\r\n  const checkApiStatus = async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/api/health`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setApiStatus({\r\n          status: 'online',\r\n          env: data.env,\r\n          url: API_URL\r\n        });\r\n        setError(null);\r\n      } else {\r\n        setApiStatus({\r\n          status: 'error',\r\n          message: `Erro ao conectar com a API: ${response.status}`,\r\n          url: API_URL\r\n        });\r\n        setError(`Erro ao conectar com o servidor: ${response.status} ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      setApiStatus({\r\n        status: 'offline',\r\n        message: 'Não foi possível conectar ao servidor',\r\n        error: error.message,\r\n        url: API_URL\r\n      });\r\n      setError(`Falha de conexão com o servidor: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // Função para limpar os resultados e resetar o estado\r\n  const handleReset = () => {\r\n    setSummaries([]);\r\n    setPatientName('');\r\n    setError(null);\r\n    setFiles([]);\r\n    setUploadStatus(null);\r\n    setProcessingStage(null);\r\n    setProcessedFiles(0);\r\n    setTotalFiles(0);\r\n  };\r\n\r\n  // Modificado para lidar com múltiplos arquivos\r\n  const handleFileChange = (e) => {\r\n    const selectedFiles = Array.from(e.target.files);\r\n    setUploadStatus(null);\r\n    setProcessingStage(null);\r\n    \r\n    // Verificando se todos os arquivos são PDFs\r\n    const validFiles = selectedFiles.filter(file => file.type === 'application/pdf');\r\n    \r\n    if (validFiles.length === 0) {\r\n      setFiles([]);\r\n      setError('Por favor, selecione apenas arquivos PDF válidos.');\r\n    } else if (validFiles.length !== selectedFiles.length) {\r\n      // Alguns arquivos não são PDFs\r\n      setFiles(validFiles);\r\n      setError('Somente os arquivos PDF selecionados serão processados.');\r\n    } else {\r\n      setFiles(validFiles);\r\n      setError(null);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (files.length === 0) {\r\n      setError('Por favor, selecione pelo menos um arquivo PDF válido.');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    setUploadStatus({ stage: 'iniciando', message: 'Iniciando processamento...' });\r\n    setProcessingStage('upload');\r\n    \r\n    // Armazenar todos os resultados combinados\r\n    let allSummaries = [];\r\n    let combinedPatientName = '';\r\n    let failedFiles = [];\r\n    \r\n    // Definir o total de arquivos a processar\r\n    setTotalFiles(files.length);\r\n    setProcessedFiles(0);\r\n\r\n    try {\r\n      // Processar cada arquivo sequencialmente\r\n      for (let i = 0; i < files.length; i++) {\r\n        const file = files[i];\r\n        \r\n        // Atualizar status para o arquivo atual\r\n        setUploadStatus({ \r\n          stage: 'enviando', \r\n          message: `Enviando arquivo ${i+1} de ${files.length}: ${file.name}...` \r\n        });\r\n        \r\n        const formData = new FormData();\r\n        formData.append('pdf', file);\r\n        \r\n        try {\r\n          console.log(`Enviando arquivo ${i+1}/${files.length} para ${API_URL}/api/upload`);\r\n          \r\n          const response = await fetch(`${API_URL}/api/upload`, {\r\n            method: 'POST',\r\n            body: formData,\r\n          });\r\n          \r\n          setProcessingStage('processing');\r\n          setUploadStatus({ \r\n            stage: 'processando', \r\n            message: `Processando documento ${i+1} de ${files.length}: ${file.name}...` \r\n          });\r\n          \r\n          if (!response.ok) {\r\n            let errorMessage = `Erro ${response.status}: ${response.statusText}`;\r\n            \r\n            try {\r\n              const errorData = await response.json();\r\n              if (errorData.message) {\r\n                errorMessage = errorData.message;\r\n              }\r\n            } catch (jsonError) {\r\n              // Continuar com a mensagem de erro padrão se não puder ler JSON\r\n            }\r\n            \r\n            // Adicionar à lista de falhas, mas continuar processando outros arquivos\r\n            failedFiles.push({\r\n              name: file.name,\r\n              error: errorMessage\r\n            });\r\n            console.error(`Erro ao processar arquivo ${file.name}:`, errorMessage);\r\n          } else {\r\n            const data = await response.json();\r\n            \r\n            // Verificar se temos resultados válidos\r\n            if (data.summaries && data.summaries.length > 0) {\r\n              // Adicionar prefixo do nome do arquivo aos resultados para identificação\r\n              const prefixedSummaries = data.summaries.map(summary => ({\r\n                ...summary,\r\n                fileName: file.name,\r\n                content: summary.content\r\n              }));\r\n              \r\n              // Adicionar os resultados ao array combinado\r\n              allSummaries = [...allSummaries, ...prefixedSummaries];\r\n              \r\n              // Se ainda não temos um nome de paciente ou este arquivo tem um melhor\r\n              if (!combinedPatientName && data.patientName && \r\n                  data.patientName !== 'Nome do Paciente não identificado') {\r\n                combinedPatientName = data.patientName;\r\n              }\r\n            } else {\r\n              failedFiles.push({\r\n                name: file.name,\r\n                error: 'Não foi possível extrair informações deste documento.'\r\n              });\r\n            }\r\n          }\r\n        } catch (fileError) {\r\n          // Registrar erro para este arquivo, mas continuar com os próximos\r\n          failedFiles.push({\r\n            name: file.name,\r\n            error: fileError.message || 'Erro desconhecido ao processar o documento.'\r\n          });\r\n          console.error(`Erro ao processar arquivo ${file.name}:`, fileError);\r\n        }\r\n        \r\n        // Incrementar contador de arquivos processados\r\n        setProcessedFiles(i + 1);\r\n      }\r\n      \r\n      // Após processar todos os arquivos, atualizar o estado com os resultados\r\n      if (allSummaries.length > 0) {\r\n        setSummaries(allSummaries);\r\n        \r\n        // Definir nome do paciente se encontrado em algum arquivo\r\n        if (combinedPatientName) {\r\n          setPatientName(combinedPatientName);\r\n        } else {\r\n          setPatientName('Paciente não identificado');\r\n        }\r\n        \r\n        // Definir mensagem de status final\r\n        setProcessingStage('complete');\r\n        \r\n        if (failedFiles.length > 0) {\r\n          // Alguns arquivos falharam\r\n          setUploadStatus({ \r\n            stage: 'aviso', \r\n            message: `Processamento concluído com ${failedFiles.length} falhas em ${files.length} arquivos.`\r\n          });\r\n        } else {\r\n          // Todos os arquivos foram processados com sucesso\r\n          setUploadStatus({ \r\n            stage: 'sucesso', \r\n            message: `${files.length} documento(s) processado(s) com sucesso!`\r\n          });\r\n        }\r\n      } else {\r\n        // Nenhum arquivo processado com sucesso\r\n        setProcessingStage('error');\r\n        setUploadStatus({ \r\n          stage: 'erro', \r\n          message: 'Falha ao processar todos os documentos.'\r\n        });\r\n        \r\n        setError(`Nenhum documento pôde ser processado. ${\r\n          failedFiles.length > 0 ? \r\n          `Erros: ${failedFiles.map(f => `${f.name}: ${f.error}`).join('; ')}` : ''\r\n        }`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro global ao enviar os arquivos:', error);\r\n      setProcessingStage('error');\r\n      setUploadStatus({ \r\n        stage: 'erro', \r\n        message: 'Falha no processamento dos documentos.'\r\n      });\r\n      \r\n      setError(error.message || 'Erro ao processar os documentos. Tente novamente.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Função para obter descrição amigável do método de extração\r\n  const getMethodDescription = (method) => {\r\n    const descriptions = {\r\n      'direto': 'processamento direto',\r\n      'desprotegido': 'remoção de proteção',\r\n      'reparado': 'reparo de estrutura',\r\n      'gs_reparado': 'reparo avançado',\r\n      'partes': 'processamento em partes',\r\n      'falha': 'falha no processamento'\r\n    };\r\n    \r\n    return descriptions[method] || method;\r\n  };\r\n\r\n  // Função para extrair apenas os exames sem seções ou formatação extra\r\n  const extractOnlyExams = () => {\r\n    let allExams = [];\r\n    \r\n    summaries.forEach((summary) => {\r\n      const lines = summary.content.split('\\n');\r\n      \r\n      lines.forEach((line) => {\r\n        if (line.trim() && !line.match(/^SÉRIE|^HEMOGRAMA|^EXAMES/i)) {\r\n          allExams.push(line.trim());\r\n        }\r\n      });\r\n    });\r\n    \r\n    // Remover duplicatas\r\n    allExams = [...new Set(allExams)];\r\n    \r\n    return allExams;\r\n  };\r\n\r\n  // Gerar texto formatado simplificado para cópia\r\n  const getSimplifiedTextForCopy = () => {\r\n    // Nome do paciente no topo\r\n    let formattedText = patientName ? `PACIENTE: ${patientName}\\n\\n` : '';\r\n    \r\n    // Adicionar cada exame em uma linha\r\n    const exams = extractOnlyExams();\r\n    exams.forEach(exam => {\r\n      formattedText += `${exam}\\n`;\r\n    });\r\n    \r\n    return formattedText;\r\n  };\r\n\r\n  // Função para copiar texto para a área de transferência\r\n  const copyToClipboard = () => {\r\n    if (textAreaRef.current) {\r\n      textAreaRef.current.select();\r\n      document.execCommand('copy');\r\n      // Mostrar uma mensagem de sucesso\r\n      alert('Resultados copiados para a área de transferência!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div className=\"institute-logo\">\r\n          <span className=\"logo-text\">Instituto Paulo Godoi</span>\r\n        </div>\r\n        <h1>Extrator de Resultados de Exames</h1>\r\n        <p className=\"subtitle\">Sistema interno para processamento de laudos laboratoriais</p>\r\n        \r\n        {/* Indicador de status da API */}\r\n        {apiStatus && (\r\n          <div className={`api-status ${apiStatus.status}`}>\r\n            <span className=\"status-indicator\"></span>\r\n            {apiStatus.status === 'online' ? (\r\n              <span>API conectada ({apiStatus.env})</span>\r\n            ) : apiStatus.status === 'checking' ? (\r\n              <span>Verificando conexão...</span>\r\n            ) : (\r\n              <span>Erro de conexão: {apiStatus.message} \r\n                <button className=\"retry-button\" onClick={retryApiConnection}>\r\n                  Reconectar\r\n                </button>\r\n              </span>\r\n            )}\r\n          </div>\r\n        )}\r\n      </header>\r\n      <main>\r\n        {/* Mostrar o manipulador de erros para erros de API */}\r\n        {(apiStatus?.status === 'offline' || apiStatus?.status === 'error') && (\r\n          <ErrorHandler \r\n            error={`Não foi possível conectar ao servidor. ${apiStatus.message}`}\r\n            onRetry={retryApiConnection}\r\n          />\r\n        )}\r\n        \r\n        <div className=\"uploader-container\">\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"file-input-container\">\r\n              <input\r\n                type=\"file\"\r\n                id=\"pdf-upload\"\r\n                onChange={handleFileChange}\r\n                accept=\"application/pdf\"\r\n                multiple // Adicionado atributo multiple para permitir seleção de múltiplos arquivos\r\n              />\r\n              <label htmlFor=\"pdf-upload\" className=\"file-label\">\r\n                {files.length > 0 \r\n                  ? `${files.length} arquivo(s) selecionado(s)` \r\n                  : 'Escolher arquivos PDF de exames'}\r\n              </label>\r\n              {/* Mostrar nomes dos arquivos selecionados */}\r\n              {files.length > 0 && (\r\n                <div className=\"selected-files\">\r\n                  <p>Arquivos selecionados:</p>\r\n                  <ul>\r\n                    {files.map((file, index) => (\r\n                      <li key={index}>{file.name}</li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <button \r\n              type=\"submit\" \r\n              className=\"upload-button\"\r\n              disabled={files.length === 0 || apiStatus?.status !== 'online' || processingStage === 'upload' || processingStage === 'processing'}\r\n            >\r\n              {processingStage === 'upload' || processingStage === 'processing' ? \r\n                'Processando...' : 'Extrair Resultados'}\r\n            </button>\r\n          </form>\r\n          \r\n          {/* Indicador de progresso aprimorado para múltiplos arquivos */}\r\n          {(processingStage === 'upload' || processingStage === 'processing') && (\r\n            <div className=\"progress-bar-container\">\r\n              <div className={`progress-bar ${processingStage}`}>\r\n                <div \r\n                  className=\"progress-indicator\" \r\n                  style={{\r\n                    width: totalFiles > 0 ? `${(processedFiles / totalFiles) * 100}%` : '0%'\r\n                  }}\r\n                ></div>\r\n              </div>\r\n              <div className=\"progress-status\">\r\n                {uploadStatus?.message || 'Processando documentos...'}\r\n                {totalFiles > 0 && ` (${processedFiles}/${totalFiles})`}\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Status de upload */}\r\n          {uploadStatus && (\r\n            <div className={`upload-status ${uploadStatus.stage}`}>\r\n              <span className=\"status-icon\">\r\n                {uploadStatus.stage === 'sucesso' ? '✓' : \r\n                uploadStatus.stage === 'erro' ? '✗' : \r\n                uploadStatus.stage === 'aviso' ? '⚠️' : '⟳'}\r\n              </span>\r\n              <span className=\"status-message\">{uploadStatus.message}</span>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Dicas para PDFs problemáticos */}\r\n          {uploadStatus && uploadStatus.stage === 'erro' && (\r\n            <div className=\"pdf-tips\">\r\n              <h4>Possíveis soluções:</h4>\r\n              <ul>\r\n                <li>Verifique se os PDFs não estão protegidos por senha</li>\r\n                <li>Tente salvar os PDFs novamente usando \"Salvar como\" no Adobe Reader</li>\r\n                <li>Se possível, tente imprimir os documentos para novos PDFs</li>\r\n                <li>Entre em contato com o laboratório para obter versões digitais alternativas</li>\r\n                <li>Se o problema persistir, use uma ferramenta online para converter os PDFs para outro formato</li>\r\n              </ul>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Aviso quando o documento foi processado com ajustes */}\r\n          {uploadStatus && uploadStatus.stage === 'aviso' && (\r\n            <div className=\"processing-notice\">\r\n              <p>Os documentos foram processados, mas podem conter algumas imprecisões devido ao formato dos arquivos originais.</p>\r\n              <p>Verifique cuidadosamente os resultados extraídos antes de usá-los.</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {loading && !processingStage && <p className=\"loading\">Processando os documentos, por favor aguarde...</p>}\r\n        {error && !uploadStatus && <p className=\"error\">Erro: {error}</p>}\r\n        \r\n        {/* Botão para resetar (somente se tiver resultados) */}\r\n        {summaries.length > 0 && (\r\n          <div className=\"reset-button-container\">\r\n            <button \r\n              className=\"reset-button\"\r\n              onClick={handleReset}\r\n            >\r\n              Novos Documentos\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"summary-container\">\r\n          {summaries.length === 0 ? (\r\n            <p className=\"empty-message\">Os resultados dos exames aparecerão aqui.</p>\r\n          ) : (\r\n            <div className=\"text-view-container\">\r\n              <h2>Resultados - {patientName}</h2>\r\n              <p className=\"copy-instructions\">Lista de resultados para copiar e colar:</p>\r\n              <div className=\"text-area-container\">\r\n                <textarea\r\n                  ref={textAreaRef}\r\n                  className=\"results-text-area\"\r\n                  value={getSimplifiedTextForCopy()}\r\n                  readOnly\r\n                />\r\n                <button onClick={copyToClipboard} className=\"copy-button\">\r\n                  <i className=\"copy-icon\">📋</i> Copiar para Área de Transferência\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </main>\r\n      <footer>\r\n        <p>© 2025 - Instituto Paulo Godoi - Sistema de Processamento de Exames</p>\r\n        <p className=\"api-info\">Ambiente: {apiStatus?.env || 'Desconectado'} | API: {API_URL}</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}